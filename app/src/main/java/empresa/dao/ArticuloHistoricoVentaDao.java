package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.ArticuloHistoricoVenta;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICULO_HISTORICO_VENTA".
*/
public class ArticuloHistoricoVentaDao extends AbstractDao<ArticuloHistoricoVenta, Long> {

    public static final String TABLENAME = "ARTICULO_HISTORICO_VENTA";

    /**
     * Properties of entity ArticuloHistoricoVenta.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idarticulo = new Property(0, Long.class, "idarticulo", true, "IDARTICULO");
        public final static Property Idproducto = new Property(1, Long.class, "idproducto", false, "IDPRODUCTO");
        public final static Property Idcoleccion = new Property(2, Long.class, "idcoleccion", false, "IDCOLECCION");
        public final static Property Codigobarra = new Property(3, String.class, "codigobarra", false, "CODIGOBARRA");
        public final static Property Referencia = new Property(4, String.class, "referencia", false, "REFERENCIA");
        public final static Property Descripcion = new Property(5, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Precioventaeq = new Property(6, Double.class, "precioventaeq", false, "PRECIOVENTAEQ");
        public final static Property Preciocostoeq = new Property(7, Double.class, "preciocostoeq", false, "PRECIOCOSTOEQ");
        public final static Property Preciocostoreal = new Property(8, Double.class, "preciocostoreal", false, "PRECIOCOSTOREAL");
        public final static Property Preciocostorealeq = new Property(9, Double.class, "preciocostorealeq", false, "PRECIOCOSTOREALEQ");
        public final static Property TotalDet = new Property(10, double.class, "totalDet", false, "TOTAL_DET");
        public final static Property Preciofactura = new Property(11, double.class, "preciofactura", false, "PRECIOFACTURA");
        public final static Property Color = new Property(12, String.class, "color", false, "COLOR");
        public final static Property Talle = new Property(13, String.class, "talle", false, "TALLE");
        public final static Property CantidadDet = new Property(14, long.class, "cantidadDet", false, "CANTIDAD_DET");
        public final static Property PorcentajeDescuentoDet = new Property(15, long.class, "porcentajeDescuentoDet", false, "PORCENTAJE_DESCUENTO_DET");
        public final static Property PrecioDet = new Property(16, double.class, "precioDet", false, "PRECIO_DET");
        public final static Property ImpuestoDet = new Property(17, double.class, "impuestoDet", false, "IMPUESTO_DET");
    };


    public ArticuloHistoricoVentaDao(DaoConfig config) {
        super(config);
    }

    public ArticuloHistoricoVentaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARTICULO_HISTORICO_VENTA' (" + //
                "'IDARTICULO' INTEGER PRIMARY KEY ," + // 0: idarticulo
                "'IDPRODUCTO' INTEGER," + // 1: idproducto
                "'IDCOLECCION' INTEGER," + // 2: idcoleccion
                "'CODIGOBARRA' TEXT," + // 3: codigobarra
                "'REFERENCIA' TEXT," + // 4: referencia
                "'DESCRIPCION' TEXT," + // 5: descripcion
                "'PRECIOVENTAEQ' REAL," + // 6: precioventaeq
                "'PRECIOCOSTOEQ' REAL," + // 7: preciocostoeq
                "'PRECIOCOSTOREAL' REAL," + // 8: preciocostoreal
                "'PRECIOCOSTOREALEQ' REAL," + // 9: preciocostorealeq
                "'TOTAL_DET' REAL NOT NULL ," + // 10: totalDet
                "'PRECIOFACTURA' REAL NOT NULL ," + // 11: preciofactura
                "'COLOR' TEXT," + // 12: color
                "'TALLE' TEXT," + // 13: talle
                "'CANTIDAD_DET' INTEGER NOT NULL ," + // 14: cantidadDet
                "'PORCENTAJE_DESCUENTO_DET' INTEGER NOT NULL ," + // 15: porcentajeDescuentoDet
                "'PRECIO_DET' REAL NOT NULL ," + // 16: precioDet
                "'IMPUESTO_DET' REAL NOT NULL );"); // 17: impuestoDet
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARTICULO_HISTORICO_VENTA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ArticuloHistoricoVenta entity) {
        stmt.clearBindings();

        Long idarticulo = entity.getIdarticulo();
        if (idarticulo != null) {
            stmt.bindLong(1, idarticulo);
        }

        Long idproducto = entity.getIdproducto();
        if (idproducto != null) {
            stmt.bindLong(2, idproducto);
        }

        Long idcoleccion = entity.getIdcoleccion();
        if (idcoleccion != null) {
            stmt.bindLong(3, idcoleccion);
        }

        String codigobarra = entity.getCodigobarra();
        if (codigobarra != null) {
            stmt.bindString(4, codigobarra);
        }

        String referencia = entity.getReferencia();
        if (referencia != null) {
            stmt.bindString(5, referencia);
        }

        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(6, descripcion);
        }

        Double precioventaeq = entity.getPrecioventaeq();
        if (precioventaeq != null) {
            stmt.bindDouble(7, precioventaeq);
        }

        Double preciocostoeq = entity.getPreciocostoeq();
        if (preciocostoeq != null) {
            stmt.bindDouble(8, preciocostoeq);
        }

        Double preciocostoreal = entity.getPreciocostoreal();
        if (preciocostoreal != null) {
            stmt.bindDouble(9, preciocostoreal);
        }

        Double preciocostorealeq = entity.getPreciocostorealeq();
        if (preciocostorealeq != null) {
            stmt.bindDouble(10, preciocostorealeq);
        }
        stmt.bindDouble(11, entity.getTotalDet());
        stmt.bindDouble(12, entity.getPreciofactura());

        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(13, color);
        }

        String talle = entity.getTalle();
        if (talle != null) {
            stmt.bindString(14, talle);
        }
        stmt.bindLong(15, entity.getCantidadDet());
        stmt.bindLong(16, entity.getPorcentajeDescuentoDet());
        stmt.bindDouble(17, entity.getPrecioDet());
        stmt.bindDouble(18, entity.getImpuestoDet());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public ArticuloHistoricoVenta readEntity(Cursor cursor, int offset) {
        ArticuloHistoricoVenta entity = new ArticuloHistoricoVenta( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idarticulo
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // idproducto
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // idcoleccion
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // codigobarra
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // referencia
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // descripcion
                cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // precioventaeq
                cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // preciocostoeq
                cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // preciocostoreal
                cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // preciocostorealeq
                cursor.getDouble(offset + 10), // totalDet
                cursor.getDouble(offset + 11), // preciofactura
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // color
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // talle
                cursor.getLong(offset + 14), // cantidadDet
                cursor.getLong(offset + 15), // porcentajeDescuentoDet
                cursor.getDouble(offset + 16), // precioDet
                cursor.getDouble(offset + 17) // impuestoDet
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ArticuloHistoricoVenta entity, int offset) {
        entity.setIdarticulo(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdproducto(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIdcoleccion(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCodigobarra(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setReferencia(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescripcion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrecioventaeq(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setPreciocostoeq(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setPreciocostoreal(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setPreciocostorealeq(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setTotalDet(cursor.getDouble(offset + 10));
        entity.setPreciofactura(cursor.getDouble(offset + 11));
        entity.setColor(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTalle(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCantidadDet(cursor.getLong(offset + 14));
        entity.setPorcentajeDescuentoDet(cursor.getLong(offset + 15));
        entity.setPrecioDet(cursor.getDouble(offset + 16));
        entity.setImpuestoDet(cursor.getDouble(offset + 17));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ArticuloHistoricoVenta entity, long rowId) {
        entity.setIdarticulo(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(ArticuloHistoricoVenta entity) {
        if(entity != null) {
            return entity.getIdarticulo();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
