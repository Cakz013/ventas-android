package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.Localidad;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCALIDAD".
*/
public class LocalidadDao extends AbstractDao<Localidad, Long> {

    public static final String TABLENAME = "LOCALIDAD";

    /**
     * Properties of entity Localidad.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idlocalidad = new Property(0, Long.class, "idlocalidad", true, "IDLOCALIDAD");
        public final static Property Descripcion = new Property(1, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Codregion = new Property(2, Long.class, "codregion", false, "CODREGION");
    };


    public LocalidadDao(DaoConfig config) {
        super(config);
    }

    public LocalidadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOCALIDAD' (" + //
                "'IDLOCALIDAD' INTEGER PRIMARY KEY ," + // 0: idlocalidad
                "'DESCRIPCION' TEXT NOT NULL ," + // 1: descripcion
                "'CODREGION' INTEGER);"); // 2: codregion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOCALIDAD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Localidad entity) {
        stmt.clearBindings();

        Long idlocalidad = entity.getIdlocalidad();
        if (idlocalidad != null) {
            stmt.bindLong(1, idlocalidad);
        }
        stmt.bindString(2, entity.getDescripcion());

        Long codregion = entity.getCodregion();
        if (codregion != null) {
            stmt.bindLong(3, codregion);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Localidad readEntity(Cursor cursor, int offset) {
        Localidad entity = new Localidad( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idlocalidad
                cursor.getString(offset + 1), // descripcion
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // codregion
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Localidad entity, int offset) {
        entity.setIdlocalidad(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescripcion(cursor.getString(offset + 1));
        entity.setCodregion(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Localidad entity, long rowId) {
        entity.setIdlocalidad(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Localidad entity) {
        if(entity != null) {
            return entity.getIdlocalidad();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
