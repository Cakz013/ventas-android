package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.ClienteFidelidad;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLIENTE_FIDELIDAD".
*/
public class ClienteFidelidadDao extends AbstractDao<ClienteFidelidad, Void> {

    public static final String TABLENAME = "CLIENTE_FIDELIDAD";

    /**
     * Properties of entity ClienteFidelidad.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idcliente = new Property(0, long.class, "idcliente", false, "IDCLIENTE");
        public final static Property Idoficial = new Property(1, long.class, "idoficial", false, "IDOFICIAL");
        public final static Property Idproducto = new Property(2, long.class, "idproducto", false, "IDPRODUCTO");
        public final static Property Idcoleccion = new Property(3, long.class, "idcoleccion", false, "IDCOLECCION");
        public final static Property Cantidadanterior = new Property(4, long.class, "cantidadanterior", false, "CANTIDADANTERIOR");
        public final static Property Cantidadmeta = new Property(5, long.class, "cantidadmeta", false, "CANTIDADMETA");
        public final static Property Descuentometa = new Property(6, long.class, "descuentometa", false, "DESCUENTOMETA");
        public final static Property Penalizacion = new Property(7, long.class, "penalizacion", false, "PENALIZACION");
        public final static Property Descuentoactumulado = new Property(8, long.class, "descuentoactumulado", false, "DESCUENTOACTUMULADO");
    };


    public ClienteFidelidadDao(DaoConfig config) {
        super(config);
    }

    public ClienteFidelidadDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CLIENTE_FIDELIDAD' (" + //
                "'IDCLIENTE' INTEGER NOT NULL ," + // 0: idcliente
                "'IDOFICIAL' INTEGER NOT NULL ," + // 1: idoficial
                "'IDPRODUCTO' INTEGER NOT NULL ," + // 2: idproducto
                "'IDCOLECCION' INTEGER NOT NULL ," + // 3: idcoleccion
                "'CANTIDADANTERIOR' INTEGER NOT NULL ," + // 4: cantidadanterior
                "'CANTIDADMETA' INTEGER NOT NULL ," + // 5: cantidadmeta
                "'DESCUENTOMETA' INTEGER NOT NULL ," + // 6: descuentometa
                "'PENALIZACION' INTEGER NOT NULL ," + // 7: penalizacion
                "'DESCUENTOACTUMULADO' INTEGER NOT NULL );"); // 8: descuentoactumulado
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CLIENTE_FIDELIDAD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ClienteFidelidad entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIdcliente());
        stmt.bindLong(2, entity.getIdoficial());
        stmt.bindLong(3, entity.getIdproducto());
        stmt.bindLong(4, entity.getIdcoleccion());
        stmt.bindLong(5, entity.getCantidadanterior());
        stmt.bindLong(6, entity.getCantidadmeta());
        stmt.bindLong(7, entity.getDescuentometa());
        stmt.bindLong(8, entity.getPenalizacion());
        stmt.bindLong(9, entity.getDescuentoactumulado());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /** @inheritdoc */
    @Override
    public ClienteFidelidad readEntity(Cursor cursor, int offset) {
        ClienteFidelidad entity = new ClienteFidelidad( //
                cursor.getLong(offset + 0), // idcliente
                cursor.getLong(offset + 1), // idoficial
                cursor.getLong(offset + 2), // idproducto
                cursor.getLong(offset + 3), // idcoleccion
                cursor.getLong(offset + 4), // cantidadanterior
                cursor.getLong(offset + 5), // cantidadmeta
                cursor.getLong(offset + 6), // descuentometa
                cursor.getLong(offset + 7), // penalizacion
                cursor.getLong(offset + 8) // descuentoactumulado
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ClienteFidelidad entity, int offset) {
        entity.setIdcliente(cursor.getLong(offset + 0));
        entity.setIdoficial(cursor.getLong(offset + 1));
        entity.setIdproducto(cursor.getLong(offset + 2));
        entity.setIdcoleccion(cursor.getLong(offset + 3));
        entity.setCantidadanterior(cursor.getLong(offset + 4));
        entity.setCantidadmeta(cursor.getLong(offset + 5));
        entity.setDescuentometa(cursor.getLong(offset + 6));
        entity.setPenalizacion(cursor.getLong(offset + 7));
        entity.setDescuentoactumulado(cursor.getLong(offset + 8));
    }

    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ClienteFidelidad entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /** @inheritdoc */
    @Override
    public Void getKey(ClienteFidelidad entity) {
        return null;
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
