package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.Producto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCTO".
*/
public class ProductoDao extends AbstractDao<Producto, Long> {

    public static final String TABLENAME = "PRODUCTO";

    /**
     * Properties of entity Producto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idproducto = new Property(0, Long.class, "idproducto", true, "IDPRODUCTO");
        public final static Property Descripcion = new Property(1, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Estado = new Property(2, Boolean.class, "estado", false, "ESTADO");
        public final static Property Idfamilia = new Property(3, Long.class, "idfamilia", false, "IDFAMILIA");
        public final static Property Controlstock = new Property(4, boolean.class, "controlstock", false, "CONTROLSTOCK");
        public final static Property Controlvirtual = new Property(5, boolean.class, "controlvirtual", false, "CONTROLVIRTUAL");
        public final static Property Cajacerradastock = new Property(6, Boolean.class, "cajacerradastock", false, "CAJACERRADASTOCK");
        public final static Property Usarcurvaproduct = new Property(7, Boolean.class, "usarcurvaproduct", false, "USARCURVAPRODUCT");
    };


    public ProductoDao(DaoConfig config) {
        super(config);
    }

    public ProductoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCTO' (" + //
                "'IDPRODUCTO' INTEGER PRIMARY KEY ," + // 0: idproducto
                "'DESCRIPCION' TEXT NOT NULL ," + // 1: descripcion
                "'ESTADO' INTEGER," + // 2: estado
                "'IDFAMILIA' INTEGER," + // 3: idfamilia
                "'CONTROLSTOCK' INTEGER NOT NULL ," + // 4: controlstock
                "'CONTROLVIRTUAL' INTEGER NOT NULL ," + // 5: controlvirtual
                "'CAJACERRADASTOCK' INTEGER," + // 6: cajacerradastock
                "'USARCURVAPRODUCT' INTEGER);"); // 7: usarcurvaproduct
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCTO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Producto entity) {
        stmt.clearBindings();

        Long idproducto = entity.getIdproducto();
        if (idproducto != null) {
            stmt.bindLong(1, idproducto);
        }
        stmt.bindString(2, entity.getDescripcion());

        Boolean estado = entity.getEstado();
        if (estado != null) {
            stmt.bindLong(3, estado ? 1l: 0l);
        }

        Long idfamilia = entity.getIdfamilia();
        if (idfamilia != null) {
            stmt.bindLong(4, idfamilia);
        }
        stmt.bindLong(5, entity.getControlstock() ? 1l: 0l);
        stmt.bindLong(6, entity.getControlvirtual() ? 1l: 0l);

        Boolean cajacerradastock = entity.getCajacerradastock();
        if (cajacerradastock != null) {
            stmt.bindLong(7, cajacerradastock ? 1l: 0l);
        }

        Boolean usarcurvaproduct = entity.getUsarcurvaproduct();
        if (usarcurvaproduct != null) {
            stmt.bindLong(8, usarcurvaproduct ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Producto readEntity(Cursor cursor, int offset) {
        Producto entity = new Producto( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idproducto
                cursor.getString(offset + 1), // descripcion
                cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // estado
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // idfamilia
                cursor.getShort(offset + 4) != 0, // controlstock
                cursor.getShort(offset + 5) != 0, // controlvirtual
                cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // cajacerradastock
                cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // usarcurvaproduct
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Producto entity, int offset) {
        entity.setIdproducto(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescripcion(cursor.getString(offset + 1));
        entity.setEstado(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setIdfamilia(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setControlstock(cursor.getShort(offset + 4) != 0);
        entity.setControlvirtual(cursor.getShort(offset + 5) != 0);
        entity.setCajacerradastock(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setUsarcurvaproduct(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Producto entity, long rowId) {
        entity.setIdproducto(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Producto entity) {
        if(entity != null) {
            return entity.getIdproducto();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
