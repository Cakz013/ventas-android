package empresa.dao;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import empresa.dao.DatosGeneralesEmpresaDao;
import empresa.dao.ProductoDao;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;



// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 33): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 33;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        ProductoDao.createTable(db, ifNotExists);
        DatosGeneralesEmpresaDao.createTable(db, ifNotExists);
        FacturaCabDao.createTable(db, ifNotExists);
        ColeccionDao.createTable(db, ifNotExists);
        UsuarioProductoDao.createTable(db, ifNotExists);
        ColeccionEmbarqueDao.createTable(db, ifNotExists);
        ColeccionProductoDao.createTable(db, ifNotExists);
        UsuarioDao.createTable(db, ifNotExists);
        ClienteDao.createTable(db, ifNotExists);
        Cliente2Dao.createTable(db, ifNotExists);
        ArticuloDao.createTable(db, ifNotExists);
        ArticuloHistoricoVentaDao.createTable(db, ifNotExists);
        FormaPagoDao.createTable(db, ifNotExists);
        ReferenciaDao.createTable(db, ifNotExists);
        ClienteFidelidadDao.createTable(db, ifNotExists);
        VentaCabDao.createTable(db, ifNotExists);
        VentaDetDao.createTable(db, ifNotExists);
        TipoClienteLogDao.createTable(db, ifNotExists);
        ClienteLogDao.createTable(db, ifNotExists);
        EstadoAplicacionDao.createTable(db, ifNotExists);
        FamiliaDao.createTable(db, ifNotExists);
        TipoPersonaDao.createTable(db, ifNotExists);
        TipoDocumentoDao.createTable(db, ifNotExists);
        TipoClienteDao.createTable(db, ifNotExists);
        LocalidadDao.createTable(db, ifNotExists);
        RegionDao.createTable(db, ifNotExists);
        ZonaDao.createTable(db, ifNotExists);
        RubroDao.createTable(db, ifNotExists);
        BarrioDao.createTable(db, ifNotExists);
        LineaArticuloDao.createTable(db, ifNotExists);
        UltimaVentaDao.createTable(db, ifNotExists);
        ProgramaVisitaDao.createTable(db, ifNotExists);
        GrupoLineaArticuloDao.createTable(db, ifNotExists);
        EstadoPedidoHechoDao.createTable(db, ifNotExists);
        PromedioPorColeccionDao.createTable(db, ifNotExists);
        PromocionDao.createTable(db, ifNotExists);
        ConfiguracionRemotaTabletDao.createTable(db, ifNotExists);
        EscalaDao.createTable(db, ifNotExists);
        GrupoMultiplicadorDao.createTable(db, ifNotExists);
        ProductMigradoFabricaDao.createTable(db, ifNotExists);
        ImagenArticuloDao.createTable(db, ifNotExists);
        EmpresaUsuarioDao.createTable(db, ifNotExists);
        EmpresaDao.createTable(db, ifNotExists);
        ConfiguracionLocalTabletDao.createTable(db, ifNotExists);
        ArticuloUbicacionDao.createTable(db, ifNotExists);
        BoxDao.createTable(db, ifNotExists);
        ReferenciaUbicacionBoxDao.createTable(db, ifNotExists);
        metavendedorclienteDao.createTable(db, ifNotExists);
        ClienteProductoDao.createTable(db, ifNotExists);
        MetaVendedorDao.createTable(db, ifNotExists);
        FormaPagoDetDao.createTable(db, ifNotExists);
        ClientePinDao.createTable(db, ifNotExists);
        DescuentoArticuloDao.createTable(db, ifNotExists);
        LocalidadVentacabDao.createTable(db, ifNotExists);
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        ProductoDao.dropTable(db, ifExists);
        DatosGeneralesEmpresaDao.dropTable(db, ifExists);
        FacturaCabDao.dropTable(db, ifExists);
        ColeccionDao.dropTable(db, ifExists);
        UsuarioProductoDao.dropTable(db, ifExists);
        ColeccionEmbarqueDao.dropTable(db, ifExists);
        ColeccionProductoDao.dropTable(db, ifExists);
        UsuarioDao.dropTable(db, ifExists);
        ClienteDao.dropTable(db, ifExists);
        Cliente2Dao.dropTable(db, ifExists);
        ArticuloDao.dropTable(db, ifExists);
        ArticuloHistoricoVentaDao.dropTable(db, ifExists);
        FormaPagoDao.dropTable(db, ifExists);
        ReferenciaDao.dropTable(db, ifExists);
        ClienteFidelidadDao.dropTable(db, ifExists);
        VentaCabDao.dropTable(db, ifExists);
        VentaDetDao.dropTable(db, ifExists);
        TipoClienteLogDao.dropTable(db, ifExists);
        ClienteLogDao.dropTable(db, ifExists);
        EstadoAplicacionDao.dropTable(db, ifExists);
        FamiliaDao.dropTable(db, ifExists);
        TipoPersonaDao.dropTable(db, ifExists);
        TipoDocumentoDao.dropTable(db, ifExists);
        TipoClienteDao.dropTable(db, ifExists);
        LocalidadDao.dropTable(db, ifExists);
        RegionDao.dropTable(db, ifExists);
        ZonaDao.dropTable(db, ifExists);
        RubroDao.dropTable(db, ifExists);
        BarrioDao.dropTable(db, ifExists);
        LineaArticuloDao.dropTable(db, ifExists);
        UltimaVentaDao.dropTable(db, ifExists);
        ProgramaVisitaDao.dropTable(db, ifExists);
        GrupoLineaArticuloDao.dropTable(db, ifExists);
        EstadoPedidoHechoDao.dropTable(db, ifExists);
        PromedioPorColeccionDao.dropTable(db, ifExists);
        PromocionDao.dropTable(db, ifExists);
        ConfiguracionRemotaTabletDao.dropTable(db, ifExists);
        EscalaDao.dropTable(db, ifExists);
        GrupoMultiplicadorDao.dropTable(db, ifExists);
        ProductMigradoFabricaDao.dropTable(db, ifExists);
        ImagenArticuloDao.dropTable(db, ifExists);
        EmpresaUsuarioDao.dropTable(db, ifExists);
        EmpresaDao.dropTable(db, ifExists);
        ConfiguracionLocalTabletDao.dropTable(db, ifExists);
        ArticuloUbicacionDao.dropTable(db, ifExists);
        BoxDao.dropTable(db, ifExists);
        ReferenciaUbicacionBoxDao.dropTable(db, ifExists);
        metavendedorclienteDao.dropTable(db, ifExists);
        ClienteProductoDao.dropTable(db, ifExists);
        MetaVendedorDao.dropTable(db, ifExists);
        FormaPagoDetDao.dropTable(db, ifExists);
        ClientePinDao.dropTable(db, ifExists);
        DescuentoArticuloDao.dropTable(db, ifExists);
        LocalidadVentacabDao.dropTable(db, ifExists);
    }

    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(ProductoDao.class);
        registerDaoClass(DatosGeneralesEmpresaDao.class);
        registerDaoClass(FacturaCabDao.class);
        registerDaoClass(ColeccionDao.class);
        registerDaoClass(UsuarioProductoDao.class);
        registerDaoClass(ColeccionEmbarqueDao.class);
        registerDaoClass(ColeccionProductoDao.class);
        registerDaoClass(UsuarioDao.class);
        registerDaoClass(ClienteDao.class);
        registerDaoClass(Cliente2Dao.class);
        registerDaoClass(ArticuloDao.class);
        registerDaoClass(ArticuloHistoricoVentaDao.class);
        registerDaoClass(FormaPagoDao.class);
        registerDaoClass(ReferenciaDao.class);
        registerDaoClass(ClienteFidelidadDao.class);
        registerDaoClass(VentaCabDao.class);
        registerDaoClass(VentaDetDao.class);
        registerDaoClass(TipoClienteLogDao.class);
        registerDaoClass(ClienteLogDao.class);
        registerDaoClass(EstadoAplicacionDao.class);
        registerDaoClass(FamiliaDao.class);
        registerDaoClass(TipoPersonaDao.class);
        registerDaoClass(TipoDocumentoDao.class);
        registerDaoClass(TipoClienteDao.class);
        registerDaoClass(LocalidadDao.class);
        registerDaoClass(RegionDao.class);
        registerDaoClass(ZonaDao.class);
        registerDaoClass(RubroDao.class);
        registerDaoClass(BarrioDao.class);
        registerDaoClass(LineaArticuloDao.class);
        registerDaoClass(UltimaVentaDao.class);
        registerDaoClass(ProgramaVisitaDao.class);
        registerDaoClass(GrupoLineaArticuloDao.class);
        registerDaoClass(EstadoPedidoHechoDao.class);
        registerDaoClass(PromedioPorColeccionDao.class);
        registerDaoClass(PromocionDao.class);
        registerDaoClass(ConfiguracionRemotaTabletDao.class);
        registerDaoClass(EscalaDao.class);
        registerDaoClass(GrupoMultiplicadorDao.class);
        registerDaoClass(ProductMigradoFabricaDao.class);
        registerDaoClass(ImagenArticuloDao.class);
        registerDaoClass(EmpresaUsuarioDao.class);
        registerDaoClass(EmpresaDao.class);
        registerDaoClass(ConfiguracionLocalTabletDao.class);
        registerDaoClass(ArticuloUbicacionDao.class);
        registerDaoClass(BoxDao.class);
        registerDaoClass(ReferenciaUbicacionBoxDao.class);
        registerDaoClass(metavendedorclienteDao.class);
        registerDaoClass(ClienteProductoDao.class);
        registerDaoClass(MetaVendedorDao.class);
        registerDaoClass(FormaPagoDetDao.class);
        registerDaoClass(ClientePinDao.class);
        registerDaoClass(DescuentoArticuloDao.class);
        registerDaoClass(LocalidadVentacabDao.class);
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

}