package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.metavendedorcliente;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "METAVENDEDORCLIENTE".
*/
public class metavendedorclienteDao extends AbstractDao<metavendedorcliente, Long> {

    public static final String TABLENAME = "METAVENDEDORCLIENTE";

    /**
     * Properties of entity metavendedorcliente.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idmetavendedorcliente = new Property(0, Long.class, "idmetavendedorcliente", true, "IDMETAVENDEDORCLIENTE");
        public final static Property Idproducto = new Property(1, Long.class, "idproducto", false, "IDPRODUCTO");
        public final static Property Idcoleccion = new Property(2, Long.class, "idcoleccion", false, "IDCOLECCION");
        public final static Property Idlineaarticulo = new Property(3, Long.class, "idlineaarticulo", false, "IDLINEAARTICULO");
        public final static Property Idgrupolineaarticulo = new Property(4, String.class, "idgrupolineaarticulo", false, "IDGRUPOLINEAARTICULO");
        public final static Property Idusuario = new Property(5, String.class, "idusuario", false, "IDUSUARIO");
        public final static Property Idcliente = new Property(6, Long.class, "idcliente", false, "IDCLIENTE");
        public final static Property Metacantidad = new Property(7, String.class, "metacantidad", false, "METACANTIDAD");
        public final static Property Metaventa = new Property(8, Long.class, "metaventa", false, "METAVENTA");
        public final static Property Fechainicio = new Property(9, String.class, "fechainicio", false, "FECHAINICIO");
        public final static Property Fechafin = new Property(10, String.class, "fechafin", false, "FECHAFIN");
        public final static Property Estado = new Property(11, Boolean.class, "estado", false, "ESTADO");
        public final static Property Usuariolog = new Property(12, String.class, "usuariolog", false, "USUARIOLOG");
        public final static Property Fechalog = new Property(13, String.class, "fechalog", false, "FECHALOG");
        public final static Property Idempresa = new Property(14, Long.class, "idempresa", false, "IDEMPRESA");
        public final static Property Idmix = new Property(15, Long.class, "idmix", false, "IDMIX");
        public final static Property Mixanterior = new Property(16, Long.class, "mixanterior", false, "MIXANTERIOR");
        public final static Property Comisionanterior = new Property(17, Long.class, "comisionanterior", false, "COMISIONANTERIOR");
        public final static Property Ventaanterior = new Property(18, Long.class, "ventaanterior", false, "VENTAANTERIOR");
        public final static Property Cantidadanterior = new Property(19, Long.class, "cantidadanterior", false, "CANTIDADANTERIOR");
        public final static Property Metapreciopromedio = new Property(20, Long.class, "metapreciopromedio", false, "METAPRECIOPROMEDIO");
        public final static Property Preciopromedioanterior = new Property(21, Long.class, "preciopromedioanterior", false, "PRECIOPROMEDIOANTERIOR");
        public final static Property Metamix = new Property(22, Long.class, "metamix", false, "METAMIX");
        public final static Property Metacomision = new Property(23, Long.class, "metacomision", false, "METACOMISION");
        public final static Property Preciopromedioprenda = new Property(24, Long.class, "preciopromedioprenda", false, "PRECIOPROMEDIOPRENDA");
    };


    public metavendedorclienteDao(DaoConfig config) {
        super(config);
    }

    public metavendedorclienteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'METAVENDEDORCLIENTE' (" + //
                "'IDMETAVENDEDORCLIENTE' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idmetavendedorcliente
                "'IDPRODUCTO' INTEGER," + // 1: idproducto
                "'IDCOLECCION' INTEGER," + // 2: idcoleccion
                "'IDLINEAARTICULO' INTEGER," + // 3: idlineaarticulo
                "'IDGRUPOLINEAARTICULO' TEXT," + // 4: idgrupolineaarticulo
                "'IDUSUARIO' TEXT," + // 5: idusuario
                "'IDCLIENTE' INTEGER," + // 6: idcliente
                "'METACANTIDAD' TEXT," + // 7: metacantidad
                "'METAVENTA' INTEGER," + // 8: metaventa
                "'FECHAINICIO' TEXT NOT NULL ," + // 9: fechainicio
                "'FECHAFIN' TEXT NOT NULL ," + // 10: fechafin
                "'ESTADO' INTEGER," + // 11: estado
                "'USUARIOLOG' TEXT," + // 12: usuariolog
                "'FECHALOG' TEXT," + // 13: fechalog
                "'IDEMPRESA' INTEGER," + // 14: idempresa
                "'IDMIX' INTEGER," + // 15: idmix
                "'MIXANTERIOR' INTEGER," + // 16: mixanterior
                "'COMISIONANTERIOR' INTEGER," + // 17: comisionanterior
                "'VENTAANTERIOR' INTEGER," + // 18: ventaanterior
                "'CANTIDADANTERIOR' INTEGER," + // 19: cantidadanterior
                "'METAPRECIOPROMEDIO' INTEGER," + // 20: metapreciopromedio
                "'PRECIOPROMEDIOANTERIOR' INTEGER," + // 21: preciopromedioanterior
                "'METAMIX' INTEGER," + // 22: metamix
                "'METACOMISION' INTEGER," + // 23: metacomision
                "'PRECIOPROMEDIOPRENDA' INTEGER);"); // 24: preciopromedioprenda
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'METAVENDEDORCLIENTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, metavendedorcliente entity) {
        stmt.clearBindings();

        Long idmetavendedorcliente = entity.getIdmetavendedorcliente();
        if (idmetavendedorcliente != null) {
            stmt.bindLong(1, idmetavendedorcliente);
        }

        Long idproducto = entity.getIdproducto();
        if (idproducto != null) {
            stmt.bindLong(2, idproducto);
        }

        Long idcoleccion = entity.getIdcoleccion();
        if (idcoleccion != null) {
            stmt.bindLong(3, idcoleccion);
        }

        Long idlineaarticulo = entity.getIdlineaarticulo();
        if (idlineaarticulo != null) {
            stmt.bindLong(4, idlineaarticulo);
        }

        String idgrupolineaarticulo = entity.getIdgrupolineaarticulo();
        if (idgrupolineaarticulo != null) {
            stmt.bindString(5, idgrupolineaarticulo);
        }

        String idusuario = entity.getIdusuario();
        if (idusuario != null) {
            stmt.bindString(6, idusuario);
        }

        Long idcliente = entity.getIdcliente();
        if (idcliente != null) {
            stmt.bindLong(7, idcliente);
        }

        String metacantidad = entity.getMetacantidad();
        if (metacantidad != null) {
            stmt.bindString(8, metacantidad);
        }

        Long metaventa = entity.getMetaventa();
        if (metaventa != null) {
            stmt.bindLong(9, metaventa);
        }
        stmt.bindString(10, entity.getFechainicio());
        stmt.bindString(11, entity.getFechafin());

        Boolean estado = entity.getEstado();
        if (estado != null) {
            stmt.bindLong(12, estado ? 1l: 0l);
        }

        String usuariolog = entity.getUsuariolog();
        if (usuariolog != null) {
            stmt.bindString(13, usuariolog);
        }

        String fechalog = entity.getFechalog();
        if (fechalog != null) {
            stmt.bindString(14, fechalog);
        }

        Long idempresa = entity.getIdempresa();
        if (idempresa != null) {
            stmt.bindLong(15, idempresa);
        }

        Long idmix = entity.getIdmix();
        if (idmix != null) {
            stmt.bindLong(16, idmix);
        }

        Long mixanterior = entity.getMixanterior();
        if (mixanterior != null) {
            stmt.bindLong(17, mixanterior);
        }

        Long comisionanterior = entity.getComisionanterior();
        if (comisionanterior != null) {
            stmt.bindLong(18, comisionanterior);
        }

        Long ventaanterior = entity.getVentaanterior();
        if (ventaanterior != null) {
            stmt.bindLong(19, ventaanterior);
        }

        Long cantidadanterior = entity.getCantidadanterior();
        if (cantidadanterior != null) {
            stmt.bindLong(20, cantidadanterior);
        }

        Long metapreciopromedio = entity.getMetapreciopromedio();
        if (metapreciopromedio != null) {
            stmt.bindLong(21, metapreciopromedio);
        }

        Long preciopromedioanterior = entity.getPreciopromedioanterior();
        if (preciopromedioanterior != null) {
            stmt.bindLong(22, preciopromedioanterior);
        }

        Long metamix = entity.getMetamix();
        if (metamix != null) {
            stmt.bindLong(23, metamix);
        }

        Long metacomision = entity.getMetacomision();
        if (metacomision != null) {
            stmt.bindLong(24, metacomision);
        }

        Long preciopromedioprenda = entity.getPreciopromedioprenda();
        if (preciopromedioprenda != null) {
            stmt.bindLong(25, preciopromedioprenda);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public metavendedorcliente readEntity(Cursor cursor, int offset) {
        metavendedorcliente entity = new metavendedorcliente( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idmetavendedorcliente
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // idproducto
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // idcoleccion
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // idlineaarticulo
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // idgrupolineaarticulo
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // idusuario
                cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // idcliente
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // metacantidad
                cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // metaventa
                cursor.getString(offset + 9), // fechainicio
                cursor.getString(offset + 10), // fechafin
                cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // estado
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // usuariolog
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // fechalog
                cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // idempresa
                cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // idmix
                cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // mixanterior
                cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // comisionanterior
                cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // ventaanterior
                cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19), // cantidadanterior
                cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20), // metapreciopromedio
                cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21), // preciopromedioanterior
                cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22), // metamix
                cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23), // metacomision
                cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24) // preciopromedioprenda
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, metavendedorcliente entity, int offset) {
        entity.setIdmetavendedorcliente(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdproducto(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIdcoleccion(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setIdlineaarticulo(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setIdgrupolineaarticulo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIdusuario(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIdcliente(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setMetacantidad(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMetaventa(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setFechainicio(cursor.getString(offset + 9));
        entity.setFechafin(cursor.getString(offset + 10));
        entity.setEstado(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setUsuariolog(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFechalog(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIdempresa(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setIdmix(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setMixanterior(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setComisionanterior(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setVentaanterior(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setCantidadanterior(cursor.isNull(offset + 19) ? null : cursor.getLong(offset + 19));
        entity.setMetapreciopromedio(cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20));
        entity.setPreciopromedioanterior(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
        entity.setMetamix(cursor.isNull(offset + 22) ? null : cursor.getLong(offset + 22));
        entity.setMetacomision(cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23));
        entity.setPreciopromedioprenda(cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(metavendedorcliente entity, long rowId) {
        entity.setIdmetavendedorcliente(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(metavendedorcliente entity) {
        if(entity != null) {
            return entity.getIdmetavendedorcliente();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
