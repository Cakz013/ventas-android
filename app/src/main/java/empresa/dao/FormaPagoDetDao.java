package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.support.annotation.NonNull;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.FormaPagoDet;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORMA_PAGO_DET".
*/
public class FormaPagoDetDao extends AbstractDao<FormaPagoDet, Long> {

    public static final String TABLENAME = "FORMA_PAGO_DET";

    /**
     * Properties of entity FormaPagoDet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idformapagodet = new Property(0, Long.class, "idformapagodet", true, "IDFORMAPAGODET");
        public final static Property Idformapago = new Property(1, long.class, "idformapago", false, "IDFORMAPAGO");
        public final static Property Descripcion = new Property(2, String.class, "descripcion", false, "DESCRIPCION");
    };


    public FormaPagoDetDao(DaoConfig config) {
        super(config);
    }

    public FormaPagoDetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FORMA_PAGO_DET' (" + //
                "'IDFORMAPAGODET' INTEGER PRIMARY KEY ," + // 0: idformapagodet
                "'IDFORMAPAGO' INTEGER NOT NULL ," + // 1: idformapago
                "'DESCRIPCION' TEXT NOT NULL );"); // 2: descripcion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FORMA_PAGO_DET'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FormaPagoDet entity) {
        stmt.clearBindings();

        Long idformapagodet = entity.getIdformapagodet();
        if (idformapagodet != null) {
            stmt.bindLong(1, idformapagodet);
        }
        stmt.bindLong(2, entity.getIdformapago());
        stmt.bindString(3, entity.getDescripcion());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public FormaPagoDet readEntity(Cursor cursor, int offset) {
        FormaPagoDet entity = new FormaPagoDet( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idformapagodet
                cursor.getLong(offset + 1), // idformapago
                cursor.getString(offset + 2) // descripcion
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FormaPagoDet entity, int offset) {
        entity.setIdformapagodet(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdformapago(cursor.getLong(offset + 1));
        entity.setDescripcion(cursor.getString(offset + 2));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FormaPagoDet entity, long rowId) {
        entity.setIdformapagodet(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(FormaPagoDet entity) {
        if(entity != null) {
            return entity.getIdformapagodet();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
