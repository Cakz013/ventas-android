package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.ImagenArticulo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGEN_ARTICULO".
*/
public class ImagenArticuloDao extends AbstractDao<ImagenArticulo, Long> {

    public static final String TABLENAME = "IMAGEN_ARTICULO";

    /**
     * Properties of entity ImagenArticulo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idarticuloimagen = new Property(0, Long.class, "idarticuloimagen", true, "IDARTICULOIMAGEN");
        public final static Property Idproducto = new Property(1, long.class, "idproducto", false, "IDPRODUCTO");
        public final static Property Idcoleccion = new Property(2, long.class, "idcoleccion", false, "IDCOLECCION");
        public final static Property Referencia = new Property(3, String.class, "referencia", false, "REFERENCIA");
        public final static Property Md5 = new Property(4, String.class, "md5", false, "MD5");
        public final static Property Size = new Property(5, Double.class, "size", false, "SIZE");
        public final static Property Imagen = new Property(6, byte[].class, "imagen", false, "IMAGEN");
    };


    public ImagenArticuloDao(DaoConfig config) {
        super(config);
    }

    public ImagenArticuloDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'IMAGEN_ARTICULO' (" + //
                "'IDARTICULOIMAGEN' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idarticuloimagen
                "'IDPRODUCTO' INTEGER NOT NULL ," + // 1: idproducto
                "'IDCOLECCION' INTEGER NOT NULL ," + // 2: idcoleccion
                "'REFERENCIA' TEXT," + // 3: referencia
                "'MD5' TEXT," + // 4: md5
                "'SIZE' REAL," + // 5: size
                "'IMAGEN' BLOB);"); // 6: imagen
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'IMAGEN_ARTICULO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ImagenArticulo entity) {
        stmt.clearBindings();

        Long idarticuloimagen = entity.getIdarticuloimagen();
        if (idarticuloimagen != null) {
            stmt.bindLong(1, idarticuloimagen);
        }
        stmt.bindLong(2, entity.getIdproducto());
        stmt.bindLong(3, entity.getIdcoleccion());

        String referencia = entity.getReferencia();
        if (referencia != null) {
            stmt.bindString(4, referencia);
        }

        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(5, md5);
        }

        Double size = entity.getSize();
        if (size != null) {
            stmt.bindDouble(6, size);
        }

        byte[] imagen = entity.getImagen();
        if (imagen != null) {
            stmt.bindBlob(7, imagen);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public ImagenArticulo readEntity(Cursor cursor, int offset) {
        ImagenArticulo entity = new ImagenArticulo( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idarticuloimagen
                cursor.getLong(offset + 1), // idproducto
                cursor.getLong(offset + 2), // idcoleccion
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // referencia
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // md5
                cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // size
                cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6) // imagen
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ImagenArticulo entity, int offset) {
        entity.setIdarticuloimagen(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdproducto(cursor.getLong(offset + 1));
        entity.setIdcoleccion(cursor.getLong(offset + 2));
        entity.setReferencia(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMd5(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSize(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setImagen(cursor.isNull(offset + 6) ? null : cursor.getBlob(offset + 6));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ImagenArticulo entity, long rowId) {
        entity.setIdarticuloimagen(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(ImagenArticulo entity) {
        if(entity != null) {
            return entity.getIdarticuloimagen();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
