package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.MetaVendedor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "META_VENDEDOR".
*/
public class MetaVendedorDao extends AbstractDao<MetaVendedor, Long> {

    public static final String TABLENAME = "META_VENDEDOR";

    /**
     * Properties of entity MetaVendedor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idmetavendedor = new Property(0, Long.class, "idmetavendedor", true, "IDMETAVENDEDOR");
        public final static Property Idvendedor = new Property(1, long.class, "idvendedor", false, "IDVENDEDOR");
        public final static Property Idcoleccion = new Property(2, long.class, "idcoleccion", false, "IDCOLECCION");
        public final static Property Idproducto = new Property(3, long.class, "idproducto", false, "IDPRODUCTO");
        public final static Property Mix = new Property(4, Long.class, "mix", false, "MIX");
    };


    public MetaVendedorDao(DaoConfig config) {
        super(config);
    }

    public MetaVendedorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'META_VENDEDOR' (" + //
                "'IDMETAVENDEDOR' INTEGER PRIMARY KEY ," + // 0: idmetavendedor
                "'IDVENDEDOR' INTEGER NOT NULL ," + // 1: idvendedor
                "'IDCOLECCION' INTEGER NOT NULL ," + // 2: idcoleccion
                "'IDPRODUCTO' INTEGER NOT NULL ," + // 3: idproducto
                "'MIX' INTEGER);"); // 4: mix
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'META_VENDEDOR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, MetaVendedor entity) {
        stmt.clearBindings();

        Long idmetavendedor = entity.getIdmetavendedor();
        if (idmetavendedor != null) {
            stmt.bindLong(1, idmetavendedor);
        }
        stmt.bindLong(2, entity.getIdvendedor());
        stmt.bindLong(3, entity.getIdcoleccion());
        stmt.bindLong(4, entity.getIdproducto());

        Long mix = entity.getMix();
        if (mix != null) {
            stmt.bindLong(5, mix);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public MetaVendedor readEntity(Cursor cursor, int offset) {
        MetaVendedor entity = new MetaVendedor( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idmetavendedor
                cursor.getLong(offset + 1), // idvendedor
                cursor.getLong(offset + 2), // idcoleccion
                cursor.getLong(offset + 3), // idproducto
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // mix
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, MetaVendedor entity, int offset) {
        entity.setIdmetavendedor(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdvendedor(cursor.getLong(offset + 1));
        entity.setIdcoleccion(cursor.getLong(offset + 2));
        entity.setIdproducto(cursor.getLong(offset + 3));
        entity.setMix(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(MetaVendedor entity, long rowId) {
        entity.setIdmetavendedor(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(MetaVendedor entity) {
        if(entity != null) {
            return entity.getIdmetavendedor();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
