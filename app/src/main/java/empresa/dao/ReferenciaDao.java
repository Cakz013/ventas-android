package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.Referencia;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REFERENCIA".
*/
public class ReferenciaDao extends AbstractDao<Referencia, Void> {

    public static final String TABLENAME = "REFERENCIA";

    /**
     * Properties of entity Referencia.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idcoleccion = new Property(0, long.class, "idcoleccion", false, "IDCOLECCION");
        public final static Property Idproducto = new Property(1, long.class, "idproducto", false, "IDPRODUCTO");
        public final static Property Referencia = new Property(2, String.class, "referencia", false, "REFERENCIA");
        public final static Property Descripcion = new Property(3, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Grupomultiplo = new Property(4, Long.class, "grupomultiplo", false, "GRUPOMULTIPLO");
    };


    public ReferenciaDao(DaoConfig config) {
        super(config);
    }

    public ReferenciaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REFERENCIA' (" + //
                "'IDCOLECCION' INTEGER NOT NULL ," + // 0: idcoleccion
                "'IDPRODUCTO' INTEGER NOT NULL ," + // 1: idproducto
                "'REFERENCIA' TEXT NOT NULL ," + // 2: referencia
                "'DESCRIPCION' TEXT NOT NULL ," + // 3: descripcion
                "'GRUPOMULTIPLO' INTEGER);"); // 4: grupomultiplo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REFERENCIA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Referencia entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getIdcoleccion());
        stmt.bindLong(2, entity.getIdproducto());
        stmt.bindString(3, entity.getReferencia());
        stmt.bindString(4, entity.getDescripcion());

        Long grupomultiplo = entity.getGrupomultiplo();
        if (grupomultiplo != null) {
            stmt.bindLong(5, grupomultiplo);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /** @inheritdoc */
    @Override
    public Referencia readEntity(Cursor cursor, int offset) {
        Referencia entity = new Referencia( //
                cursor.getLong(offset + 0), // idcoleccion
                cursor.getLong(offset + 1), // idproducto
                cursor.getString(offset + 2), // referencia
                cursor.getString(offset + 3), // descripcion
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // grupomultiplo
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Referencia entity, int offset) {
        entity.setIdcoleccion(cursor.getLong(offset + 0));
        entity.setIdproducto(cursor.getLong(offset + 1));
        entity.setReferencia(cursor.getString(offset + 2));
        entity.setDescripcion(cursor.getString(offset + 3));
        entity.setGrupomultiplo(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
    }

    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Referencia entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /** @inheritdoc */
    @Override
    public Void getKey(Referencia entity) {
        return null;
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
