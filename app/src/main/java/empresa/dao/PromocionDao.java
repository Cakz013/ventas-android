package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.Promocion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROMOCION".
*/
public class PromocionDao extends AbstractDao<Promocion, Long> {

    public static final String TABLENAME = "PROMOCION";

    /**
     * Properties of entity Promocion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idpromocion = new Property(0, Long.class, "idpromocion", true, "IDPROMOCION");
        public final static Property Idproducto = new Property(1, long.class, "idproducto", false, "IDPRODUCTO");
        public final static Property Idcoleccion = new Property(2, long.class, "idcoleccion", false, "IDCOLECCION");
        public final static Property Descripcion = new Property(3, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Tasa = new Property(4, double.class, "tasa", false, "TASA");
        public final static Property Fechavigencia = new Property(5, java.util.Date.class, "fechavigencia", false, "FECHAVIGENCIA");
        public final static Property Fechavencimiento = new Property(6, java.util.Date.class, "fechavencimiento", false, "FECHAVENCIMIENTO");
    };


    public PromocionDao(DaoConfig config) {
        super(config);
    }

    public PromocionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROMOCION' (" + //
                "'IDPROMOCION' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idpromocion
                "'IDPRODUCTO' INTEGER NOT NULL ," + // 1: idproducto
                "'IDCOLECCION' INTEGER NOT NULL ," + // 2: idcoleccion
                "'DESCRIPCION' TEXT NOT NULL ," + // 3: descripcion
                "'TASA' REAL NOT NULL ," + // 4: tasa
                "'FECHAVIGENCIA' INTEGER," + // 5: fechavigencia
                "'FECHAVENCIMIENTO' INTEGER);"); // 6: fechavencimiento
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROMOCION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Promocion entity) {
        stmt.clearBindings();

        Long idpromocion = entity.getIdpromocion();
        if (idpromocion != null) {
            stmt.bindLong(1, idpromocion);
        }
        stmt.bindLong(2, entity.getIdproducto());
        stmt.bindLong(3, entity.getIdcoleccion());
        stmt.bindString(4, entity.getDescripcion());
        stmt.bindDouble(5, entity.getTasa());

        java.util.Date fechavigencia = entity.getFechavigencia();
        if (fechavigencia != null) {
            stmt.bindLong(6, fechavigencia.getTime());
        }

        java.util.Date fechavencimiento = entity.getFechavencimiento();
        if (fechavencimiento != null) {
            stmt.bindLong(7, fechavencimiento.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public Promocion readEntity(Cursor cursor, int offset) {
        Promocion entity = new Promocion( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idpromocion
                cursor.getLong(offset + 1), // idproducto
                cursor.getLong(offset + 2), // idcoleccion
                cursor.getString(offset + 3), // descripcion
                cursor.getDouble(offset + 4), // tasa
                cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // fechavigencia
                cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // fechavencimiento
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Promocion entity, int offset) {
        entity.setIdpromocion(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdproducto(cursor.getLong(offset + 1));
        entity.setIdcoleccion(cursor.getLong(offset + 2));
        entity.setDescripcion(cursor.getString(offset + 3));
        entity.setTasa(cursor.getDouble(offset + 4));
        entity.setFechavigencia(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setFechavencimiento(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Promocion entity, long rowId) {
        entity.setIdpromocion(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(Promocion entity) {
        if(entity != null) {
            return entity.getIdpromocion();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
