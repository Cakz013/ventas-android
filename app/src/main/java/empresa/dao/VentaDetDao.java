package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.VentaDet;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VENTA_DET".
*/
public class VentaDetDao extends AbstractDao<VentaDet, Long> {

    public static final String TABLENAME = "VENTA_DET";

    /**
     * Properties of entity VentaDet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idventadet = new Property(0, Long.class, "idventadet", true, "IDVENTADET");
        public final static Property Idventacab = new Property(1, long.class, "idventacab", false, "IDVENTACAB");
        public final static Property Idarticulo = new Property(2, long.class, "idarticulo", false, "IDARTICULO");
        public final static Property Cantidad = new Property(3, Long.class, "cantidad", false, "CANTIDAD");
        public final static Property Idproducto = new Property(4, Long.class, "idproducto", false, "IDPRODUCTO");
        public final static Property Idcoleccion = new Property(5, Long.class, "idcoleccion", false, "IDCOLECCION");
        public final static Property Porcentajedescuento = new Property(6, Long.class, "porcentajedescuento", false, "PORCENTAJEDESCUENTO");
        public final static Property Tienedescuentopropio = new Property(7, Boolean.class, "tienedescuentopropio", false, "TIENEDESCUENTOPROPIO");
        public final static Property Precioventa = new Property(8, Double.class, "precioventa", false, "PRECIOVENTA");
        public final static Property Preciocosto = new Property(9, Double.class, "preciocosto", false, "PRECIOCOSTO");
        public final static Property Precio = new Property(10, Double.class, "precio", false, "PRECIO");
        public final static Property Preciocostoeq = new Property(11, Double.class, "preciocostoeq", false, "PRECIOCOSTOEQ");
        public final static Property Preciocostorealeq = new Property(12, Double.class, "preciocostorealeq", false, "PRECIOCOSTOREALEQ");
        public final static Property Impuesto = new Property(13, Double.class, "impuesto", false, "IMPUESTO");
        public final static Property Total = new Property(14, Double.class, "total", false, "TOTAL");
        public final static Property Tasapromocion = new Property(15, Double.class, "tasapromocion", false, "TASAPROMOCION");
        public final static Property Cantidadstockfisico = new Property(16, Long.class, "cantidadstockfisico", false, "CANTIDADSTOCKFISICO");
        public final static Property Cantidadstockvirtual = new Property(17, Long.class, "cantidadstockvirtual", false, "CANTIDADSTOCKVIRTUAL");
        public final static Property IdproductMirgradocalzado = new Property(18, Long.class, "idproductMirgradocalzado", false, "IDPRODUCT_MIRGRADOCALZADO");
        public final static Property TalleCalzado = new Property(19, String.class, "talleCalzado", false, "TALLE_CALZADO");
        public final static Property ColorCalzado = new Property(20, String.class, "colorCalzado", false, "COLOR_CALZADO");
        public final static Property Idarticulosucursalubicacion = new Property(21, Long.class, "idarticulosucursalubicacion", false, "IDARTICULOSUCURSALUBICACION");
    };


    public VentaDetDao(DaoConfig config) {
        super(config);
    }

    public VentaDetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'VENTA_DET' (" + //
                "'IDVENTADET' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idventadet
                "'IDVENTACAB' INTEGER NOT NULL ," + // 1: idventacab
                "'IDARTICULO' INTEGER NOT NULL ," + // 2: idarticulo
                "'CANTIDAD' INTEGER," + // 3: cantidad
                "'IDPRODUCTO' INTEGER," + // 4: idproducto
                "'IDCOLECCION' INTEGER," + // 5: idcoleccion
                "'PORCENTAJEDESCUENTO' INTEGER," + // 6: porcentajedescuento
                "'TIENEDESCUENTOPROPIO' INTEGER," + // 7: tienedescuentopropio
                "'PRECIOVENTA' REAL," + // 8: precioventa
                "'PRECIOCOSTO' REAL," + // 9: preciocosto
                "'PRECIO' REAL," + // 10: precio
                "'PRECIOCOSTOEQ' REAL," + // 11: preciocostoeq
                "'PRECIOCOSTOREALEQ' REAL," + // 12: preciocostorealeq
                "'IMPUESTO' REAL," + // 13: impuesto
                "'TOTAL' REAL," + // 14: total
                "'TASAPROMOCION' REAL," + // 15: tasapromocion
                "'CANTIDADSTOCKFISICO' INTEGER," + // 16: cantidadstockfisico
                "'CANTIDADSTOCKVIRTUAL' INTEGER," + // 17: cantidadstockvirtual
                "'IDPRODUCT_MIRGRADOCALZADO' INTEGER," + // 18: idproductMirgradocalzado
                "'TALLE_CALZADO' TEXT," + // 19: talleCalzado
                "'COLOR_CALZADO' TEXT," + // 20: colorCalzado
                "'IDARTICULOSUCURSALUBICACION' INTEGER);"); // 21: idarticulosucursalubicacion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VENTA_DET'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, VentaDet entity) {
        stmt.clearBindings();

        Long idventadet = entity.getIdventadet();
        if (idventadet != null) {
            stmt.bindLong(1, idventadet);
        }
        stmt.bindLong(2, entity.getIdventacab());
        stmt.bindLong(3, entity.getIdarticulo());

        Long cantidad = entity.getCantidad();
        if (cantidad != null) {
            stmt.bindLong(4, cantidad);
        }

        Long idproducto = entity.getIdproducto();
        if (idproducto != null) {
            stmt.bindLong(5, idproducto);
        }

        Long idcoleccion = entity.getIdcoleccion();
        if (idcoleccion != null) {
            stmt.bindLong(6, idcoleccion);
        }

        Long porcentajedescuento = entity.getPorcentajedescuento();
        if (porcentajedescuento != null) {
            stmt.bindLong(7, porcentajedescuento);
        }

        Boolean tienedescuentopropio = entity.getTienedescuentopropio();
        if (tienedescuentopropio != null) {
            stmt.bindLong(8, tienedescuentopropio ? 1l: 0l);
        }

        Double precioventa = entity.getPrecioventa();
        if (precioventa != null) {
            stmt.bindDouble(9, precioventa);
        }

        Double preciocosto = entity.getPreciocosto();
        if (preciocosto != null) {
            stmt.bindDouble(10, preciocosto);
        }

        Double precio = entity.getPrecio();
        if (precio != null) {
            stmt.bindDouble(11, precio);
        }

        Double preciocostoeq = entity.getPreciocostoeq();
        if (preciocostoeq != null) {
            stmt.bindDouble(12, preciocostoeq);
        }

        Double preciocostorealeq = entity.getPreciocostorealeq();
        if (preciocostorealeq != null) {
            stmt.bindDouble(13, preciocostorealeq);
        }

        Double impuesto = entity.getImpuesto();
        if (impuesto != null) {
            stmt.bindDouble(14, impuesto);
        }

        Double total = entity.getTotal();
        if (total != null) {
            stmt.bindDouble(15, total);
        }

        Double tasapromocion = entity.getTasapromocion();
        if (tasapromocion != null) {
            stmt.bindDouble(16, tasapromocion);
        }

        Long cantidadstockfisico = entity.getCantidadstockfisico();
        if (cantidadstockfisico != null) {
            stmt.bindLong(17, cantidadstockfisico);
        }

        Long cantidadstockvirtual = entity.getCantidadstockvirtual();
        if (cantidadstockvirtual != null) {
            stmt.bindLong(18, cantidadstockvirtual);
        }

        Long idproductMirgradocalzado = entity.getIdproductMirgradocalzado();
        if (idproductMirgradocalzado != null) {
            stmt.bindLong(19, idproductMirgradocalzado);
        }

        String talleCalzado = entity.getTalleCalzado();
        if (talleCalzado != null) {
            stmt.bindString(20, talleCalzado);
        }

        String colorCalzado = entity.getColorCalzado();
        if (colorCalzado != null) {
            stmt.bindString(21, colorCalzado);
        }

        Long idarticulosucursalubicacion = entity.getIdarticulosucursalubicacion();
        if (idarticulosucursalubicacion != null) {
            stmt.bindLong(22, idarticulosucursalubicacion);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public VentaDet readEntity(Cursor cursor, int offset) {
        VentaDet entity = new VentaDet( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idventadet
                cursor.getLong(offset + 1), // idventacab
                cursor.getLong(offset + 2), // idarticulo
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // cantidad
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // idproducto
                cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // idcoleccion
                cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // porcentajedescuento
                cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // tienedescuentopropio
                cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // precioventa
                cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // preciocosto
                cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // precio
                cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // preciocostoeq
                cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12), // preciocostorealeq
                cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // impuesto
                cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // total
                cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // tasapromocion
                cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // cantidadstockfisico
                cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // cantidadstockvirtual
                cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // idproductMirgradocalzado
                cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // talleCalzado
                cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // colorCalzado
                cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21) // idarticulosucursalubicacion
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, VentaDet entity, int offset) {
        entity.setIdventadet(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdventacab(cursor.getLong(offset + 1));
        entity.setIdarticulo(cursor.getLong(offset + 2));
        entity.setCantidad(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setIdproducto(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setIdcoleccion(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setPorcentajedescuento(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setTienedescuentopropio(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setPrecioventa(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setPreciocosto(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setPrecio(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setPreciocostoeq(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setPreciocostorealeq(cursor.isNull(offset + 12) ? null : cursor.getDouble(offset + 12));
        entity.setImpuesto(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setTotal(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setTasapromocion(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setCantidadstockfisico(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setCantidadstockvirtual(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setIdproductMirgradocalzado(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setTalleCalzado(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setColorCalzado(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setIdarticulosucursalubicacion(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(VentaDet entity, long rowId) {
        entity.setIdventadet(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(VentaDet entity) {
        if(entity != null) {
            return entity.getIdventadet();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
