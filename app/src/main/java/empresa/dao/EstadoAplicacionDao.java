package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.EstadoAplicacion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ESTADO_APLICACION".
*/
public class EstadoAplicacionDao extends AbstractDao<EstadoAplicacion, Long> {

    public static final String TABLENAME = "ESTADO_APLICACION";

    /**
     * Properties of entity EstadoAplicacion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idestado = new Property(0, Long.class, "idestado", true, "IDESTADO");
        public final static Property Key = new Property(1, String.class, "key", false, "KEY");
        public final static Property Value = new Property(2, String.class, "value", false, "VALUE");
    };


    public EstadoAplicacionDao(DaoConfig config) {
        super(config);
    }

    public EstadoAplicacionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ESTADO_APLICACION' (" + //
                "'IDESTADO' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idestado
                "'KEY' TEXT NOT NULL UNIQUE ," + // 1: key
                "'VALUE' TEXT);"); // 2: value
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ESTADO_APLICACION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EstadoAplicacion entity) {
        stmt.clearBindings();

        Long idestado = entity.getIdestado();
        if (idestado != null) {
            stmt.bindLong(1, idestado);
        }
        stmt.bindString(2, entity.getKey());

        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(3, value);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public EstadoAplicacion readEntity(Cursor cursor, int offset) {
        EstadoAplicacion entity = new EstadoAplicacion( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idestado
                cursor.getString(offset + 1), // key
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // value
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EstadoAplicacion entity, int offset) {
        entity.setIdestado(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKey(cursor.getString(offset + 1));
        entity.setValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EstadoAplicacion entity, long rowId) {
        entity.setIdestado(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(EstadoAplicacion entity) {
        if(entity != null) {
            return entity.getIdestado();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
