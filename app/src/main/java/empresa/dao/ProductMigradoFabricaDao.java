package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.support.annotation.NonNull;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.ProductMigradoFabrica;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT_MIGRADO_FABRICA".
*/
public class ProductMigradoFabricaDao extends AbstractDao<ProductMigradoFabrica, Long> {

    public static final String TABLENAME = "PRODUCT_MIGRADO_FABRICA";

    /**
     * Properties of entity ProductMigradoFabrica.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Linea = new Property(1, String.class, "linea", false, "LINEA");
        public final static Property Referencia = new Property(2, String.class, "referencia", false, "REFERENCIA");
        public final static Property DescripcionDetallada = new Property(3, String.class, "descripcionDetallada", false, "DESCRIPCION_DETALLADA");
        public final static Property Brand = new Property(4, String.class, "brand", false, "BRAND");
        public final static Property Talle_maximo = new Property(5, long.class, "talle_maximo", false, "TALLE_MAXIMO");
        public final static Property Talle_minimo = new Property(6, long.class, "talle_minimo", false, "TALLE_MINIMO");
        public final static Property Precio = new Property(7, double.class, "precio", false, "PRECIO");
        public final static Property Impuesto = new Property(8, double.class, "impuesto", false, "IMPUESTO");
        public final static Property Idcoleccion = new Property(9, long.class, "idcoleccion", false, "IDCOLECCION");
        public final static Property Idproducto = new Property(10, long.class, "idproducto", false, "IDPRODUCTO");
        public final static Property PermiteDescuentoPorDetalle = new Property(11, boolean.class, "permiteDescuentoPorDetalle", false, "PERMITE_DESCUENTO_POR_DETALLE");
        public final static Property UsarPantallaModoClasicoParaStockFisico = new Property(12, Boolean.class, "usarPantallaModoClasicoParaStockFisico", false, "USAR_PANTALLA_MODO_CLASICO_PARA_STOCK_FISICO");
    };


    public ProductMigradoFabricaDao(DaoConfig config) {
        super(config);
    }

    public ProductMigradoFabricaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUCT_MIGRADO_FABRICA' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'LINEA' TEXT," + // 1: linea
                "'REFERENCIA' TEXT NOT NULL ," + // 2: referencia
                "'DESCRIPCION_DETALLADA' TEXT," + // 3: descripcionDetallada
                "'BRAND' TEXT," + // 4: brand
                "'TALLE_MAXIMO' INTEGER NOT NULL ," + // 5: talle_maximo
                "'TALLE_MINIMO' INTEGER NOT NULL ," + // 6: talle_minimo
                "'PRECIO' REAL NOT NULL ," + // 7: precio
                "'IMPUESTO' REAL NOT NULL ," + // 8: impuesto
                "'IDCOLECCION' INTEGER NOT NULL ," + // 9: idcoleccion
                "'IDPRODUCTO' INTEGER NOT NULL ," + // 10: idproducto
                "'PERMITE_DESCUENTO_POR_DETALLE' INTEGER NOT NULL ," + // 11: permiteDescuentoPorDetalle
                "'USAR_PANTALLA_MODO_CLASICO_PARA_STOCK_FISICO' INTEGER);"); // 12: usarPantallaModoClasicoParaStockFisico
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUCT_MIGRADO_FABRICA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProductMigradoFabrica entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String linea = entity.getLinea();
        if (linea != null) {
            stmt.bindString(2, linea);
        }
        stmt.bindString(3, entity.getReferencia());

        String descripcionDetallada = entity.getDescripcionDetallada();
        if (descripcionDetallada != null) {
            stmt.bindString(4, descripcionDetallada);
        }

        String brand = entity.getBrand();
        if (brand != null) {
            stmt.bindString(5, brand);
        }
        stmt.bindLong(6, entity.getTalle_maximo());
        stmt.bindLong(7, entity.getTalle_minimo());
        stmt.bindDouble(8, entity.getPrecio());
        stmt.bindDouble(9, entity.getImpuesto());
        stmt.bindLong(10, entity.getIdcoleccion());
        stmt.bindLong(11, entity.getIdproducto());
        stmt.bindLong(12, entity.getPermiteDescuentoPorDetalle() ? 1l: 0l);

        Boolean usarPantallaModoClasicoParaStockFisico = entity.getUsarPantallaModoClasicoParaStockFisico();
        if (usarPantallaModoClasicoParaStockFisico != null) {
            stmt.bindLong(13, usarPantallaModoClasicoParaStockFisico ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public ProductMigradoFabrica readEntity(Cursor cursor, int offset) {
        ProductMigradoFabrica entity = new ProductMigradoFabrica( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // linea
                cursor.getString(offset + 2), // referencia
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // descripcionDetallada
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // brand
                cursor.getLong(offset + 5), // talle_maximo
                cursor.getLong(offset + 6), // talle_minimo
                cursor.getDouble(offset + 7), // precio
                cursor.getDouble(offset + 8), // impuesto
                cursor.getLong(offset + 9), // idcoleccion
                cursor.getLong(offset + 10), // idproducto
                cursor.getShort(offset + 11) != 0, // permiteDescuentoPorDetalle
                cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0 // usarPantallaModoClasicoParaStockFisico
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProductMigradoFabrica entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLinea(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReferencia(cursor.getString(offset + 2));
        entity.setDescripcionDetallada(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBrand(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTalle_maximo(cursor.getLong(offset + 5));
        entity.setTalle_minimo(cursor.getLong(offset + 6));
        entity.setPrecio(cursor.getDouble(offset + 7));
        entity.setImpuesto(cursor.getDouble(offset + 8));
        entity.setIdcoleccion(cursor.getLong(offset + 9));
        entity.setIdproducto(cursor.getLong(offset + 10));
        entity.setPermiteDescuentoPorDetalle(cursor.getShort(offset + 11) != 0);
        entity.setUsarPantallaModoClasicoParaStockFisico(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ProductMigradoFabrica entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(ProductMigradoFabrica entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
