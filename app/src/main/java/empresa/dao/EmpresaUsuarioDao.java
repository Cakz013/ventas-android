package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.EmpresaUsuario;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMPRESA_USUARIO".
*/
public class EmpresaUsuarioDao extends AbstractDao<EmpresaUsuario, Long> {

    public static final String TABLENAME = "EMPRESA_USUARIO";

    /**
     * Properties of entity EmpresaUsuario.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idusuarioempresa = new Property(0, Long.class, "idusuarioempresa", true, "IDUSUARIOEMPRESA");
        public final static Property Idusuario = new Property(1, long.class, "idusuario", false, "IDUSUARIO");
        public final static Property Idempresa = new Property(2, long.class, "idempresa", false, "IDEMPRESA");
    };


    public EmpresaUsuarioDao(DaoConfig config) {
        super(config);
    }

    public EmpresaUsuarioDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EMPRESA_USUARIO' (" + //
                "'IDUSUARIOEMPRESA' INTEGER PRIMARY KEY ," + // 0: idusuarioempresa
                "'IDUSUARIO' INTEGER NOT NULL ," + // 1: idusuario
                "'IDEMPRESA' INTEGER NOT NULL );"); // 2: idempresa
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EMPRESA_USUARIO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EmpresaUsuario entity) {
        stmt.clearBindings();

        Long idusuarioempresa = entity.getIdusuarioempresa();
        if (idusuarioempresa != null) {
            stmt.bindLong(1, idusuarioempresa);
        }
        stmt.bindLong(2, entity.getIdusuario());
        stmt.bindLong(3, entity.getIdempresa());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public EmpresaUsuario readEntity(Cursor cursor, int offset) {
        EmpresaUsuario entity = new EmpresaUsuario( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idusuarioempresa
                cursor.getLong(offset + 1), // idusuario
                cursor.getLong(offset + 2) // idempresa
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EmpresaUsuario entity, int offset) {
        entity.setIdusuarioempresa(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdusuario(cursor.getLong(offset + 1));
        entity.setIdempresa(cursor.getLong(offset + 2));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EmpresaUsuario entity, long rowId) {
        entity.setIdusuarioempresa(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(EmpresaUsuario entity) {
        if(entity != null) {
            return entity.getIdusuarioempresa();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
