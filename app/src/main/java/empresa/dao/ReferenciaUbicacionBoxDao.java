package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.ReferenciaUbicacionBox;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "REFERENCIA_UBICACION_BOX".
*/
public class ReferenciaUbicacionBoxDao extends AbstractDao<ReferenciaUbicacionBox, Long> {

    public static final String TABLENAME = "REFERENCIA_UBICACION_BOX";

    /**
     * Properties of entity ReferenciaUbicacionBox.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Idreferenciaubicacionbox = new Property(0, Long.class, "idreferenciaubicacionbox", true, "IDREFERENCIAUBICACIONBOX");
        public final static Property Idproducto = new Property(1, Long.class, "idproducto", false, "IDPRODUCTO");
        public final static Property Referencia = new Property(2, String.class, "referencia", false, "REFERENCIA");
        public final static Property Idestanteria = new Property(3, Long.class, "idestanteria", false, "IDESTANTERIA");
        public final static Property Idrack = new Property(4, Long.class, "idrack", false, "IDRACK");
        public final static Property Idbandeja = new Property(5, Long.class, "idbandeja", false, "IDBANDEJA");
        public final static Property Idcoleccion = new Property(6, Long.class, "idcoleccion", false, "IDCOLECCION");
        public final static Property Idbox = new Property(7, Long.class, "idbox", false, "IDBOX");
        public final static Property Cantidadtotal = new Property(8, Long.class, "cantidadtotal", false, "CANTIDADTOTAL");
    };


    public ReferenciaUbicacionBoxDao(DaoConfig config) {
        super(config);
    }
    
    public ReferenciaUbicacionBoxDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"REFERENCIA_UBICACION_BOX\" (" + //
                "\"IDREFERENCIAUBICACIONBOX\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idreferenciaubicacionbox
                "\"IDPRODUCTO\" INTEGER," + // 1: idproducto
                "\"REFERENCIA\" TEXT," + // 2: referencia
                "\"IDESTANTERIA\" INTEGER," + // 3: idestanteria
                "\"IDRACK\" INTEGER," + // 4: idrack
                "\"IDBANDEJA\" INTEGER," + // 5: idbandeja
                "\"IDCOLECCION\" INTEGER," + // 6: idcoleccion
                "\"IDBOX\" INTEGER," + // 7: idbox
                "\"CANTIDADTOTAL\" INTEGER);"); // 8: cantidadtotal
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"REFERENCIA_UBICACION_BOX\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ReferenciaUbicacionBox entity) {
        stmt.clearBindings();
 
        Long idreferenciaubicacionbox = entity.getIdreferenciaubicacionbox();
        if (idreferenciaubicacionbox != null) {
            stmt.bindLong(1, idreferenciaubicacionbox);
        }
 
        Long idproducto = entity.getIdproducto();
        if (idproducto != null) {
            stmt.bindLong(2, idproducto);
        }
 
        String referencia = entity.getReferencia();
        if (referencia != null) {
            stmt.bindString(3, referencia);
        }
 
        Long idestanteria = entity.getIdestanteria();
        if (idestanteria != null) {
            stmt.bindLong(4, idestanteria);
        }
 
        Long idrack = entity.getIdrack();
        if (idrack != null) {
            stmt.bindLong(5, idrack);
        }
 
        Long idbandeja = entity.getIdbandeja();
        if (idbandeja != null) {
            stmt.bindLong(6, idbandeja);
        }
 
        Long idcoleccion = entity.getIdcoleccion();
        if (idcoleccion != null) {
            stmt.bindLong(7, idcoleccion);
        }
 
        Long idbox = entity.getIdbox();
        if (idbox != null) {
            stmt.bindLong(8, idbox);
        }
 
        Long cantidadtotal = entity.getCantidadtotal();
        if (cantidadtotal != null) {
            stmt.bindLong(9, cantidadtotal);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ReferenciaUbicacionBox readEntity(Cursor cursor, int offset) {
        ReferenciaUbicacionBox entity = new ReferenciaUbicacionBox( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idreferenciaubicacionbox
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // idproducto
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // referencia
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // idestanteria
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // idrack
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // idbandeja
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // idcoleccion
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // idbox
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // cantidadtotal
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ReferenciaUbicacionBox entity, int offset) {
        entity.setIdreferenciaubicacionbox(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdproducto(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setReferencia(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIdestanteria(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setIdrack(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setIdbandeja(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setIdcoleccion(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setIdbox(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setCantidadtotal(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ReferenciaUbicacionBox entity, long rowId) {
        entity.setIdreferenciaubicacionbox(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ReferenciaUbicacionBox entity) {
        if(entity != null) {
            return entity.getIdreferenciaubicacionbox();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
