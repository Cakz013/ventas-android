package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.EstadoPedidoHecho;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ESTADO_PEDIDO_HECHO".
*/
public class EstadoPedidoHechoDao extends AbstractDao<EstadoPedidoHecho, Long> {

    public static final String TABLENAME = "ESTADO_PEDIDO_HECHO";

    /**
     * Properties of entity EstadoPedidoHecho.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idventacab = new Property(0, Long.class, "idventacab", true, "IDVENTACAB");
        public final static Property Idestadoventa = new Property(1, long.class, "idestadoventa", false, "IDESTADOVENTA");
        public final static Property Idoficial = new Property(2, long.class, "idoficial", false, "IDOFICIAL");
        public final static Property Idproducto = new Property(3, long.class, "idproducto", false, "IDPRODUCTO");
        public final static Property Idcoleccion = new Property(4, long.class, "idcoleccion", false, "IDCOLECCION");
        public final static Property Idcliente = new Property(5, long.class, "idcliente", false, "IDCLIENTE");
        public final static Property Idformapago = new Property(6, long.class, "idformapago", false, "IDFORMAPAGO");
        public final static Property Cantidadtotal = new Property(7, long.class, "cantidadtotal", false, "CANTIDADTOTAL");
        public final static Property Idembarquecab = new Property(8, Long.class, "idembarquecab", false, "IDEMBARQUECAB");
        public final static Property Importe = new Property(9, double.class, "importe", false, "IMPORTE");
        public final static Property Promediodescuento = new Property(10, Double.class, "promediodescuento", false, "PROMEDIODESCUENTO");
        public final static Property Observacion = new Property(11, String.class, "observacion", false, "OBSERVACION");
        public final static Property Condicion = new Property(12, String.class, "condicion", false, "CONDICION");
        public final static Property Fechaoperacion = new Property(13, java.util.Date.class, "fechaoperacion", false, "FECHAOPERACION");
        public final static Property Fecha = new Property(14, java.util.Date.class, "fecha", false, "FECHA");
        public final static Property Origen = new Property(15, String.class, "origen", false, "ORIGEN");
        public final static Property Tipo = new Property(16, String.class, "tipo", false, "TIPO");
        public final static Property Fechapactoentrega = new Property(17, java.util.Date.class, "fechapactoentrega", false, "FECHAPACTOENTREGA");
    };


    public EstadoPedidoHechoDao(DaoConfig config) {
        super(config);
    }

    public EstadoPedidoHechoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ESTADO_PEDIDO_HECHO' (" + //
                "'IDVENTACAB' INTEGER PRIMARY KEY ," + // 0: idventacab
                "'IDESTADOVENTA' INTEGER NOT NULL ," + // 1: idestadoventa
                "'IDOFICIAL' INTEGER NOT NULL ," + // 2: idoficial
                "'IDPRODUCTO' INTEGER NOT NULL ," + // 3: idproducto
                "'IDCOLECCION' INTEGER NOT NULL ," + // 4: idcoleccion
                "'IDCLIENTE' INTEGER NOT NULL ," + // 5: idcliente
                "'IDFORMAPAGO' INTEGER NOT NULL ," + // 6: idformapago
                "'CANTIDADTOTAL' INTEGER NOT NULL ," + // 7: cantidadtotal
                "'IDEMBARQUECAB' INTEGER," + // 8: idembarquecab
                "'IMPORTE' REAL NOT NULL ," + // 9: importe
                "'PROMEDIODESCUENTO' REAL," + // 10: promediodescuento
                "'OBSERVACION' TEXT," + // 11: observacion
                "'CONDICION' TEXT," + // 12: condicion
                "'FECHAOPERACION' INTEGER NOT NULL ," + // 13: fechaoperacion
                "'FECHA' INTEGER NOT NULL ," + // 14: fecha
                "'ORIGEN' TEXT," + // 15: origen
                "'TIPO' TEXT," + // 16: tipo
                "'FECHAPACTOENTREGA' INTEGER);"); // 17: fechapactoentrega
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ESTADO_PEDIDO_HECHO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EstadoPedidoHecho entity) {
        stmt.clearBindings();

        Long idventacab = entity.getIdventacab();
        if (idventacab != null) {
            stmt.bindLong(1, idventacab);
        }
        stmt.bindLong(2, entity.getIdestadoventa());
        stmt.bindLong(3, entity.getIdoficial());
        stmt.bindLong(4, entity.getIdproducto());
        stmt.bindLong(5, entity.getIdcoleccion());
        stmt.bindLong(6, entity.getIdcliente());
        stmt.bindLong(7, entity.getIdformapago());
        stmt.bindLong(8, entity.getCantidadtotal());

        Long idembarquecab = entity.getIdembarquecab();
        if (idembarquecab != null) {
            stmt.bindLong(9, idembarquecab);
        }
        stmt.bindDouble(10, entity.getImporte());

        Double promediodescuento = entity.getPromediodescuento();
        if (promediodescuento != null) {
            stmt.bindDouble(11, promediodescuento);
        }

        String observacion = entity.getObservacion();
        if (observacion != null) {
            stmt.bindString(12, observacion);
        }

        String condicion = entity.getCondicion();
        if (condicion != null) {
            stmt.bindString(13, condicion);
        }
        stmt.bindLong(14, entity.getFechaoperacion().getTime());
        stmt.bindLong(15, entity.getFecha().getTime());

        String origen = entity.getOrigen();
        if (origen != null) {
            stmt.bindString(16, origen);
        }

        String tipo = entity.getTipo();
        if (tipo != null) {
            stmt.bindString(17, tipo);
        }

        java.util.Date fechapactoentrega = entity.getFechapactoentrega();
        if (fechapactoentrega != null) {
            stmt.bindLong(18, fechapactoentrega.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public EstadoPedidoHecho readEntity(Cursor cursor, int offset) {
        EstadoPedidoHecho entity = new EstadoPedidoHecho( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idventacab
                cursor.getLong(offset + 1), // idestadoventa
                cursor.getLong(offset + 2), // idoficial
                cursor.getLong(offset + 3), // idproducto
                cursor.getLong(offset + 4), // idcoleccion
                cursor.getLong(offset + 5), // idcliente
                cursor.getLong(offset + 6), // idformapago
                cursor.getLong(offset + 7), // cantidadtotal
                cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // idembarquecab
                cursor.getDouble(offset + 9), // importe
                cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // promediodescuento
                cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // observacion
                cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // condicion
                new java.util.Date(cursor.getLong(offset + 13)), // fechaoperacion
                new java.util.Date(cursor.getLong(offset + 14)), // fecha
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // origen
                cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // tipo
                cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)) // fechapactoentrega
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EstadoPedidoHecho entity, int offset) {
        entity.setIdventacab(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdestadoventa(cursor.getLong(offset + 1));
        entity.setIdoficial(cursor.getLong(offset + 2));
        entity.setIdproducto(cursor.getLong(offset + 3));
        entity.setIdcoleccion(cursor.getLong(offset + 4));
        entity.setIdcliente(cursor.getLong(offset + 5));
        entity.setIdformapago(cursor.getLong(offset + 6));
        entity.setCantidadtotal(cursor.getLong(offset + 7));
        entity.setIdembarquecab(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setImporte(cursor.getDouble(offset + 9));
        entity.setPromediodescuento(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setObservacion(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCondicion(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFechaoperacion(new java.util.Date(cursor.getLong(offset + 13)));
        entity.setFecha(new java.util.Date(cursor.getLong(offset + 14)));
        entity.setOrigen(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTipo(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setFechapactoentrega(cursor.isNull(offset + 17) ? null : new java.util.Date(cursor.getLong(offset + 17)));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EstadoPedidoHecho entity, long rowId) {
        entity.setIdventacab(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(EstadoPedidoHecho entity) {
        if(entity != null) {
            return entity.getIdventacab();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
