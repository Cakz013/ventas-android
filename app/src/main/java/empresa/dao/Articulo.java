package empresa.dao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

import java.util.List;

import tpoffline.Config;
import tpoffline.ContextoAplicacion;
import tpoffline.dbentidades.Dao;
import tpoffline.utils.Strings;

/**
 * Entity mapped to table "ARTICULO".
 */
public class Articulo implements java.io.Serializable {

    private Long idarticulo;
    private Long idproducto;
    private Long idcoleccion;
    private String codigobarra;
    private String referencia;
    private String descripcion;
    private Double precioventaeq;
    private Double preciocostoeq;
    private Double preciocostoreal;
    private Double preciocostorealeq;
    private String color;
    private String talle;
    private Long ordentalle;
    private Long idfamilia;
    private Long cantidadreal;
    private Long cantidadvirtual;
    private Long cantcomprometidastock;
    private Long cantcomprometidavirtual;
    private Long cantidadimportacion;
    private Long idlineaarticulo;
    private Long idgrupolineaarticulo;
    private String catalogo;
    private String nropagina;
    private String categoriamargen;
    private Double precioventa2;
    private Double precioventa3;
    private Double precioventa4;
    private Double maximodescuento;
    private String produccion;
    private Long idgrupo;
    private Long multiplicador;
    private Long idempresa;
    private Long idproductMigracionFabricaCalzado;
    private String md5imagen;
    private Long idarticulosucursalubicacion;
    private Long codgradeEnarticulosucursalubicacion;
    private Boolean indlanzamiento;

    // KEEP FIELDS - put your custom fields here

    public static final Long ID_GRUPO_CASA = 4L;
    public static final Long ID_GRUPO_ESCOLAR = 8L;

    public static final Long ID_FAMILIA_PRENDA_VESTIR = 1L;

    private static LineaArticulo lineaArticuloInst;

    private Long cantidadEnBox = null;
    private byte[] imagenArticulo;
    private boolean imagenArticuloLoaded;

    private ReferenciaUbicacionBox referenciaUbicacionBox;
    // KEEP FIELDS END

    public Articulo() {
    }

    public Articulo(Long idarticulo) {
        this.idarticulo = idarticulo;
    }

    public Articulo(Long idarticulo, Long idproducto, Long idcoleccion, String codigobarra, String referencia, String descripcion, Double precioventaeq, Double preciocostoeq, Double preciocostoreal, Double preciocostorealeq, String color, String talle, Long ordentalle, Long idfamilia, Long cantidadreal, Long cantidadvirtual, Long cantcomprometidastock, Long cantcomprometidavirtual, Long cantidadimportacion, Long idlineaarticulo, Long idgrupolineaarticulo, String catalogo, String nropagina, String categoriamargen, Double precioventa2, Double precioventa3, Double precioventa4, Double maximodescuento, String produccion, Long idgrupo, Long multiplicador, Long idempresa, Long idproductMigracionFabricaCalzado, String md5imagen, Long idarticulosucursalubicacion, Long codgradeEnarticulosucursalubicacion, Boolean indlanzamiento) {
        this.idarticulo = idarticulo;
        this.idproducto = idproducto;
        this.idcoleccion = idcoleccion;
        this.codigobarra = codigobarra;
        this.referencia = referencia;
        this.descripcion = descripcion;
        this.precioventaeq = precioventaeq;
        this.preciocostoeq = preciocostoeq;
        this.preciocostoreal = preciocostoreal;
        this.preciocostorealeq = preciocostorealeq;
        this.color = color;
        this.talle = talle;
        this.ordentalle = ordentalle;
        this.idfamilia = idfamilia;
        this.cantidadreal = cantidadreal;
        this.cantidadvirtual = cantidadvirtual;
        this.cantcomprometidastock = cantcomprometidastock;
        this.cantcomprometidavirtual = cantcomprometidavirtual;
        this.cantidadimportacion = cantidadimportacion;
        this.idlineaarticulo = idlineaarticulo;
        this.idgrupolineaarticulo = idgrupolineaarticulo;
        this.catalogo = catalogo;
        this.nropagina = nropagina;
        this.categoriamargen = categoriamargen;
        this.precioventa2 = precioventa2;
        this.precioventa3 = precioventa3;
        this.precioventa4 = precioventa4;
        this.maximodescuento = maximodescuento;
        this.produccion = produccion;
        this.idgrupo = idgrupo;
        this.multiplicador = multiplicador;
        this.idempresa = idempresa;
        this.idproductMigracionFabricaCalzado = idproductMigracionFabricaCalzado;
        this.md5imagen = md5imagen;
        this.idarticulosucursalubicacion = idarticulosucursalubicacion;
        this.codgradeEnarticulosucursalubicacion = codgradeEnarticulosucursalubicacion;
        this.indlanzamiento = indlanzamiento;
    }

    public Long getIdarticulo() {
        return idarticulo;
    }

    public void setIdarticulo(Long idarticulo) {
        this.idarticulo = idarticulo;
    }

    public Long getIdproducto() {
        return idproducto;
    }

    public void setIdproducto(Long idproducto) {
        this.idproducto = idproducto;
    }

    public Long getIdcoleccion() {
        return idcoleccion;
    }

    public void setIdcoleccion(Long idcoleccion) {
        this.idcoleccion = idcoleccion;
    }

    public String getCodigobarra() {
        return codigobarra;
    }

    public void setCodigobarra(String codigobarra) {
        this.codigobarra = codigobarra;
    }

    public String getReferencia() {
        return referencia;
    }

    public void setReferencia(String referencia) {
        this.referencia = referencia;
    }

    public String getDescripcion() {
        return descripcion;
    }

    public void setDescripcion(String descripcion) {
        this.descripcion = descripcion;
    }

    public Double getPrecioventaeq() {
        return precioventaeq;
    }

    public void setPrecioventaeq(Double precioventaeq) {
        this.precioventaeq = precioventaeq;
    }

    public Double getPreciocostoeq() {
        return preciocostoeq;
    }

    public void setPreciocostoeq(Double preciocostoeq) {
        this.preciocostoeq = preciocostoeq;
    }

    public Double getPreciocostoreal() {
        return preciocostoreal;
    }

    public void setPreciocostoreal(Double preciocostoreal) {
        this.preciocostoreal = preciocostoreal;
    }

    public Double getPreciocostorealeq() {
        return preciocostorealeq;
    }

    public void setPreciocostorealeq(Double preciocostorealeq) {
        this.preciocostorealeq = preciocostorealeq;
    }

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    public String getTalle() {
        return talle;
    }

    public void setTalle(String talle) {
        this.talle = talle;
    }

    public Long getOrdentalle() {
        return ordentalle;
    }

    public void setOrdentalle(Long ordentalle) {
        this.ordentalle = ordentalle;
    }

    public Long getIdfamilia() {
        return idfamilia;
    }

    public void setIdfamilia(Long idfamilia) {
        this.idfamilia = idfamilia;
    }

    public Long getCantidadreal() {
        return cantidadreal;
    }

    public void setCantidadreal(Long cantidadreal) {
        this.cantidadreal = cantidadreal;
    }

    public Long getCantidadvirtual() {
        return cantidadvirtual;
    }

    public void setCantidadvirtual(Long cantidadvirtual) {
        this.cantidadvirtual = cantidadvirtual;
    }

    public Long getCantcomprometidastock() {
        return cantcomprometidastock;
    }

    public void setCantcomprometidastock(Long cantcomprometidastock) {
        this.cantcomprometidastock = cantcomprometidastock;
    }

    public Long getCantcomprometidavirtual() {
        return cantcomprometidavirtual;
    }

    public void setCantcomprometidavirtual(Long cantcomprometidavirtual) {
        this.cantcomprometidavirtual = cantcomprometidavirtual;
    }

    public Long getCantidadimportacion() {
        return cantidadimportacion;
    }

    public void setCantidadimportacion(Long cantidadimportacion) {
        this.cantidadimportacion = cantidadimportacion;
    }

    public Long getIdlineaarticulo() {
        return idlineaarticulo;
    }

    public void setIdlineaarticulo(Long idlineaarticulo) {
        this.idlineaarticulo = idlineaarticulo;
    }

    public Long getIdgrupolineaarticulo() {
        return idgrupolineaarticulo;
    }

    public void setIdgrupolineaarticulo(Long idgrupolineaarticulo) {
        this.idgrupolineaarticulo = idgrupolineaarticulo;
    }

    public String getCatalogo() {
        return catalogo;
    }

    public void setCatalogo(String catalogo) {
        this.catalogo = catalogo;
    }

    public String getNropagina() {
        return nropagina;
    }

    public void setNropagina(String nropagina) {
        this.nropagina = nropagina;
    }

    public String getCategoriamargen() {
        return categoriamargen;
    }

    public void setCategoriamargen(String categoriamargen) {
        this.categoriamargen = categoriamargen;
    }

    public Double getPrecioventa2() {
        return precioventa2;
    }

    public void setPrecioventa2(Double precioventa2) {
        this.precioventa2 = precioventa2;
    }

    public Double getPrecioventa3() {
        return precioventa3;
    }

    public void setPrecioventa3(Double precioventa3) {
        this.precioventa3 = precioventa3;
    }

    public Double getPrecioventa4() {
        return precioventa4;
    }

    public void setPrecioventa4(Double precioventa4) {
        this.precioventa4 = precioventa4;
    }

    public Double getMaximodescuento() {
        return maximodescuento;
    }

    public void setMaximodescuento(Double maximodescuento) {
        this.maximodescuento = maximodescuento;
    }

    public String getProduccion() {
        return produccion;
    }

    public void setProduccion(String produccion) {
        this.produccion = produccion;
    }

    public Long getIdgrupo() {
        return idgrupo;
    }

    public void setIdgrupo(Long idgrupo) {
        this.idgrupo = idgrupo;
    }

    public Long getMultiplicador() {
        return multiplicador;
    }

    public void setMultiplicador(Long multiplicador) {
        this.multiplicador = multiplicador;
    }

    public Long getIdempresa() {
        return idempresa;
    }

    public void setIdempresa(Long idempresa) {
        this.idempresa = idempresa;
    }

    public Long getIdproductMigracionFabricaCalzado() {
        return idproductMigracionFabricaCalzado;
    }

    public void setIdproductMigracionFabricaCalzado(Long idproductMigracionFabricaCalzado) {
        this.idproductMigracionFabricaCalzado = idproductMigracionFabricaCalzado;
    }

    public String getMd5imagen() {
        return md5imagen;
    }

    public void setMd5imagen(String md5imagen) {
        this.md5imagen = md5imagen;
    }

    public Long getIdarticulosucursalubicacion() {
        return idarticulosucursalubicacion;
    }

    public void setIdarticulosucursalubicacion(Long idarticulosucursalubicacion) {
        this.idarticulosucursalubicacion = idarticulosucursalubicacion;
    }

    public Long getCodgradeEnarticulosucursalubicacion() {
        return codgradeEnarticulosucursalubicacion;
    }

    public void setCodgradeEnarticulosucursalubicacion(Long codgradeEnarticulosucursalubicacion) {
        this.codgradeEnarticulosucursalubicacion = codgradeEnarticulosucursalubicacion;
    }

    public Boolean getIndlanzamiento() {
        return indlanzamiento;
    }

    public void setIndlanzamiento(Boolean indlanzamiento) {
        this.indlanzamiento = indlanzamiento;
    }

    // KEEP METHODS - put your custom methods here

    public Double getPrecioVentaUnitarioByTipoCliente(long idtipocliente) {
        //super mercados y CAJOVIL usar precion venta 1 normal
        Double precioVentaSelecto = null;

        if(idtipocliente == TipoCliente.TIPO_CLIENTE_NORMAL ) {
            precioVentaSelecto = getPrecioventaeq();

        } else 	if(idtipocliente == TipoCliente.TIPO_CLIENTE_SUPERMERCADO) {

            if(getIdproducto() ==  Producto.ID_CAJOVIL ) {
                precioVentaSelecto = getPrecioventaeq();
            } else {
                precioVentaSelecto = getPrecioventa2();
            }

        }else if(idtipocliente == TipoCliente.TIPO_CLIENTE_DISTRIBUIDOR) {
            precioVentaSelecto = getPrecioventa3();
        } else  if(idtipocliente == TipoCliente.TIPO_CLIENTE_ESPECIAL) {
            precioVentaSelecto = getPrecioventa4();
            //LINEA AGREGADA POR ERROR DE CLIENTE
        } else  if(idtipocliente == TipoCliente.TIPO_CLIENTE_PROSPECTO) {
            precioVentaSelecto = getPrecioventaeq();
            //FIN DE LINEA AGREGADA
        } else {
            throw new IllegalArgumentException("idtipocliente invalido: " + idtipocliente);
        }



        if(precioVentaSelecto == null && precioVentaSelecto.equals(0D))
            precioVentaSelecto = getPrecioventaeq();

        return getPrecioventaeq();
    }

    public boolean permiteEdicionDescuentoPorDetalle() {
        if(getLineaArticulo() != null) {
            if(getLineaArticulo().getIndicadorPermiteDescuento() != null
                    && getLineaArticulo().getIndicadorPermiteDescuento().booleanValue() == true ) {

                if(getMaximodescuento() != null) {
                    return true;
                } else {
                    return false;
                }
            }
            else {
                return false;
            }
        }  else {

            if(getMaximodescuento() != null) {
                return true;
            } else {
                return false;
            }
        }
    }


    private LineaArticulo  getLineaArticulo() {
        if(lineaArticuloInst == null)
            lineaArticuloInst = Dao.getLineaArticuloById(ContextoAplicacion.getContext(), getIdlineaarticulo());
        return lineaArticuloInst;
    }

    public long calcularStockDisponible(TipoPedidoEnum tipoPedido, Producto productoSelecto) {

        if( ! getIdproducto().equals(productoSelecto.getIdproducto()))
            throw new IllegalArgumentException("el idproducto de este articulo NO CORRESPONDE con el parametro producto: " +  productoSelecto);

        long stockDisponible = 0;

        if(TipoPedidoEnum.STOCK.equals(tipoPedido)) {
            stockDisponible = calcularStockDiponibleFisico(this);

        } else {
            // ES FABRICA
            if(productoSelecto.getControlstock()  ) { // si TRUE, hace control de stock

                stockDisponible = calcularStockVirtual(this);

            } else {
                if(productoSelecto.getControlvirtual()) { // si debe ser control virtual

                    stockDisponible = calcularStockVirtual(this);

                } else {
                    stockDisponible  = Config.CANTIDAD_VIRTUAL_SIN_LIMITE;
                }
            }
        }

        return stockDisponible;

    }

	/*
	private boolean esEscolarOCasaGrupoLinea() {
		Long idg = getIdgrupolineaarticulo();
		boolean esEscolarCasa = false;

		if (idg != null) {
			if (idg == ID_GRUPO_CASA || idg == ID_GRUPO_ESCOLAR) {
				esEscolarCasa = true;
			} else {
				esEscolarCasa = false;
			}
		}
		return esEscolarCasa;
	}
*/


    private static long coalesce(Long objValue, long onNull) {
        if (objValue == null)
            return onNull;
        else
            return objValue;
    }

    private static long calcularStockDiponibleFisico(Articulo a) {

        long cantidadreal = coalesce(a.getCantidadreal(), 0L);
        long cantComproStockReal = coalesce(a.getCantcomprometidastock(), 0L);
        return cantidadreal - cantComproStockReal;

    }

    private static long calcularStockVirtual(Articulo a) {

        // stockdisponible = cantreal + cantvirtual - ( cantComproStock +
        // cantComproFabrica)

        long cantidadreal = coalesce(a.getCantidadreal(), 0L);
        long cantComproStockReal = coalesce(a.getCantcomprometidastock(), 0L);
        long cantComproVirtual = coalesce(a.getCantcomprometidavirtual(), 0L);
        long cantidadimportacion = coalesce(a.getCantidadimportacion(), 0L);

        return cantidadreal + cantidadimportacion
                - (cantComproStockReal + cantComproVirtual);

    }

    private static long calcularStockDiponibleVirtualExclusivo(Articulo a) {

        long cantComproVirtual = coalesce(a.getCantcomprometidavirtual(), 0L);
        long cantidadimportacion = coalesce(a.getCantidadimportacion(), 0L);

        return  cantidadimportacion - cantComproVirtual;

    }

    public String getSimpleDescription() {
        return getReferencia() + " - " + getDescripcion() + " - " + " (t)" + getTalle() + " (c)" + getColor() + "["+ getIdarticulo()+"]";
    }


    @Override
    public String toString() {
		/*return "Articulo #" + getIdarticulo() + ", talle " + getTalle()
				+ ", color " + getColor() + ", codBarra" + getCodigobarra()
				+ " referencia: " + getReferencia() + " descripcion: "
				+ getDescripcion() + " Cantcomprometidastock: "
				+ getCantcomprometidastock() + " Cantcomprometidavirtual: "
				+ getCantcomprometidavirtual() + " Cantidadreal: "
				+ getCantidadreal() + " cantidadimportacion: "
				+ getCantidadimportacion() + ", linea grupo: " + getIdgrupolineaarticulo()
				+ ", categoriaMargen: " + getCategoriamargen()
				+ " precioventa1: " + getPrecioventaeq()
				+ " precioventa2: " + getPrecioventa2()
				+ " precioventa3: "+ getPrecioventa3()
				+ " precioventa4: " + getPrecioventa4()
				+ ", precioCostoEq: " + getPreciocostoeq()
				+ ", precioCostorealEq: " + getPreciocostorealeq()
				+ ", precioCostoreal: " + getPreciocostoreal()
				+ " descuento max: " + getMaximodescuento()
				+ " idfamilia " + getIdfamilia()
				+ " cantidad box: " + getCantidadEnBox()
				+ "box contender " + getReferenciaUbicacionBoxContenedor(); */
        return "Ariculo #" + getDescripcion() + " " + getReferencia();
    }

    @Override
    public boolean equals(Object otroObjeto) {
        boolean esIgual = false;
        if (otroObjeto == null) {
            esIgual = false;
        } else if (otroObjeto instanceof Articulo) {

            // Manejar caso de autogenerado para fabrica de calazados que no tienen Idarticulos reales pero
            // tienen un idproductomigrado

            Articulo otroArt = (Articulo) otroObjeto;

            if(otroArt.getIdproductMigracionFabricaCalzado() != null) {

                String otroColor= Strings.nullTo(otroArt.getColor(), "-");
                String colorEste = Strings.nullTo(getColor(), "-");

                if(colorEste.equalsIgnoreCase(otroColor)
                        && otroArt.getReferencia().equalsIgnoreCase(getReferencia())
                        && otroArt.getTalle().equalsIgnoreCase(getTalle())
                        && otroArt.getIdproductMigracionFabricaCalzado().longValue() == getIdproductMigracionFabricaCalzado().longValue() ){

                    esIgual = true;

                } else {
                    esIgual = false;
                }
            } else {
                if (otroArt.getIdarticulo().equals(this.getIdarticulo())) {
                    esIgual = true;
                } else {
                    esIgual = false;
                }
            }

        }

        return esIgual;

    }

    @Override
    public int hashCode() {
        return getIdarticulo().hashCode();
    }

    public String getStockFisicoCantidadRealDisponibleToString() {
        return calcularStockDiponibleFisico(this) + "";
    }

    public long getStockFisicoCantidadRealDisponible() {
        return calcularStockDiponibleFisico(this);
    }

    public long  getStockCantidadImportacionDisponible() {
        return calcularStockDiponibleVirtualExclusivo(this);
    }


    public String getStockVirtualExlusivoCantidadRealToString() {
        return calcularStockDiponibleVirtualExclusivo(this) + "";
    }

    public String getStockSaldoVentaTotalToString() {
        return calcularStockVirtual(this) + "";
    }
    public boolean esDescontinuado() {
        return "D".equals(getCategoriamargen()) ;
    }

    public long getStockVirtualDisponible() {
        return calcularStockVirtual(this);
    }

    public Long getCantidadEnBox() {
        return cantidadEnBox;
    }

    public void setCantidadEnBox(Long cantidadEnBox) {
        if(this.cantidadEnBox != null) {
            throw new IllegalStateException("Error cantidad en box ya esta fijado = " + this.cantidadEnBox + " art: " + getSimpleDescription());
        }
        this.cantidadEnBox = cantidadEnBox;
    }

    public byte[] getImagen() {

        if(imagenArticuloLoaded) {
            return imagenArticulo;
        } else {

            if(getMd5imagen() == null) {
                imagenArticulo =  null;
            } else {

                List<ImagenArticulo> lr = Dao.getArticuloImagenByMd5(getMd5imagen());
                if(lr.size() > 0) {
                    imagenArticulo =  lr.get(0).getImagen();
                } else {
                    imagenArticulo =  null;
                }
            }

        }

        imagenArticuloLoaded =true;
        return imagenArticulo;


    }

    public  ReferenciaUbicacionBox getReferenciaUbicacionBoxContenedor() {
        return referenciaUbicacionBox;
    }

    public void  setReferenciaUbicacionBoxContenedor(ReferenciaUbicacionBox refBox) {
        this.referenciaUbicacionBox = refBox;


    }

    public boolean esDeCajaCalzado() {
        if(getCantidadEnBox() == null  && getReferenciaUbicacionBoxContenedor() != null) {
            throw new IllegalStateException("cantidad en box es null pero tiene referencia a un box este articulo");
        }

        if(getCantidadEnBox() != null  && getReferenciaUbicacionBoxContenedor() == null) {
            throw new IllegalStateException("cantidad en box es un numero pero NO tiene referencia a un box este articulo");
        }

        boolean estaEnCaja =  getCantidadEnBox() != null && getReferenciaUbicacionBoxContenedor() != null;

        if(estaEnCaja ) {
            if(getIdarticulosucursalubicacion() != null) {
                return true;
            } else {
                throw new IllegalStateException("idarticulosucursalubicacion es null pero articulo esta en caja");
            }

        } else {
            return false;
        }
    }

    public Articulo copiar() {
        return new Articulo(idarticulo, idproducto, idcoleccion, codigobarra, referencia, descripcion, precioventaeq, preciocostoeq, preciocostoreal, preciocostorealeq, color, talle, ordentalle, idfamilia, cantidadreal, cantidadvirtual, cantcomprometidastock, cantcomprometidavirtual, cantidadimportacion, idlineaarticulo, idgrupolineaarticulo, catalogo, nropagina, categoriamargen, precioventa2, precioventa3, precioventa4, maximodescuento, produccion, idgrupo, multiplicador, idempresa, idproductMigracionFabricaCalzado,
                md5imagen,idarticulosucursalubicacion,codgradeEnarticulosucursalubicacion,indlanzamiento);




    }
    // KEEP METHODS END

}
