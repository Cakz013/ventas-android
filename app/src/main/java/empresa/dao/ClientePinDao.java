package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.ClientePin;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLIENTE_PIN".
*/
public class ClientePinDao extends AbstractDao<ClientePin, Long> {

    public static final String TABLENAME = "CLIENTE_PIN";

    /**
     * Properties of entity ClientePin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idcliente = new Property(0, Long.class, "idcliente", true, "IDCLIENTE");
        public final static Property Nrodocumento = new Property(1, String.class, "nrodocumento", false, "NRODOCUMENTO");
        public final static Property Clientepin = new Property(2, long.class, "clientepin", false, "CLIENTEPIN");
    };


    public ClientePinDao(DaoConfig config) {
        super(config);
    }

    public ClientePinDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CLIENTE_PIN' (" + //
                "'IDCLIENTE' INTEGER PRIMARY KEY ," + // 0: idcliente
                "'NRODOCUMENTO' TEXT NOT NULL ," + // 1: nrodocumento
                "'CLIENTEPIN' INTEGER NOT NULL );"); // 2: clientepin
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CLIENTE_PIN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ClientePin entity) {
        stmt.clearBindings();

        Long idcliente = entity.getIdcliente();
        if (idcliente != null) {
            stmt.bindLong(1, idcliente);
        }
        stmt.bindString(2, entity.getNrodocumento());
        stmt.bindLong(3, entity.getClientepin());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public ClientePin readEntity(Cursor cursor, int offset) {
        ClientePin entity = new ClientePin( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idcliente
                cursor.getString(offset + 1), // nrodocumento
                cursor.getLong(offset + 2) // clientepin
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ClientePin entity, int offset) {
        entity.setIdcliente(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNrodocumento(cursor.getString(offset + 1));
        entity.setClientepin(cursor.getLong(offset + 2));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ClientePin entity, long rowId) {
        entity.setIdcliente(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(ClientePin entity) {
        if(entity != null) {
            return entity.getIdcliente();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
