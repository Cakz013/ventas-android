package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.ProgramaVisita;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROGRAMA_VISITA".
*/
public class ProgramaVisitaDao extends AbstractDao<ProgramaVisita, Long> {

    public static final String TABLENAME = "PROGRAMA_VISITA";

    /**
     * Properties of entity ProgramaVisita.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idregistroclientelog = new Property(0, Long.class, "idregistroclientelog", true, "IDREGISTROALIANZACLIENTELOG");
        public final static Property Idoficial = new Property(1, long.class, "idoficial", false, "IDOFICIAL");
        public final static Property Fechainicio = new Property(2, String.class, "fechainicio", false, "FECHAINICIO");
        public final static Property Observacion = new Property(3, String.class, "observacion", false, "OBSERVACION");
        public final static Property Idcliente = new Property(4, long.class, "idcliente", false, "IDCLIENTE");
        public final static Property Idtipoclientelog = new Property(5, Long.class, "idtipoclientelog", false, "IDTIPOCLIENTELOG");
        public final static Property Idventacab = new Property(6, Long.class, "idventacab", false, "IDVENTACAB");
        public final static Property Fechaproximollamado = new Property(7, String.class, "fechaproximollamado", false, "FECHAPROXIMOLLAMADO");
        public final static Property Idproducto = new Property(8, Long.class, "idproducto", false, "IDPRODUCTO");
    };


    public ProgramaVisitaDao(DaoConfig config) {
        super(config);
    }

    public ProgramaVisitaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROGRAMA_VISITA' (" + //
                "'IDREGISTROALIANZACLIENTELOG' INTEGER PRIMARY KEY ," + // 0: idregistroclientelog
                "'IDOFICIAL' INTEGER NOT NULL ," + // 1: idoficial
                "'FECHAINICIO' TEXT NOT NULL ," + // 2: fechainicio
                "'OBSERVACION' TEXT," + // 3: observacion
                "'IDCLIENTE' INTEGER NOT NULL ," + // 4: idcliente
                "'IDTIPOCLIENTELOG' INTEGER," + // 5: idtipoclientelog
                "'IDVENTACAB' INTEGER," + // 6: idventacab
                "'FECHAPROXIMOLLAMADO' TEXT," + // 7: fechaproximollamado
                "'IDPRODUCTO' INTEGER);"); // 8: idproducto
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROGRAMA_VISITA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProgramaVisita entity) {
        stmt.clearBindings();

        Long idregistroclientelog = entity.getIdregistroclientelog();
        if (idregistroclientelog != null) {
            stmt.bindLong(1, idregistroclientelog);
        }
        stmt.bindLong(2, entity.getIdoficial());
        stmt.bindString(3, entity.getFechainicio());

        String observacion = entity.getObservacion();
        if (observacion != null) {
            stmt.bindString(4, observacion);
        }
        stmt.bindLong(5, entity.getIdcliente());

        Long idtipoclientelog = entity.getIdtipoclientelog();
        if (idtipoclientelog != null) {
            stmt.bindLong(6, idtipoclientelog);
        }

        Long idventacab = entity.getIdventacab();
        if (idventacab != null) {
            stmt.bindLong(7, idventacab);
        }

        String fechaproximollamado = entity.getFechaproximollamado();
        if (fechaproximollamado != null) {
            stmt.bindString(8, fechaproximollamado);
        }

        Long idproducto = entity.getIdproducto();
        if (idproducto != null) {
            stmt.bindLong(9, idproducto);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public ProgramaVisita readEntity(Cursor cursor, int offset) {
        ProgramaVisita entity = new ProgramaVisita( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idregistroclientelog
                cursor.getLong(offset + 1), // idoficial
                cursor.getString(offset + 2), // fechainicio
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // observacion
                cursor.getLong(offset + 4), // idcliente
                cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // idtipoclientelog
                cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // idventacab
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fechaproximollamado
                cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // idproducto
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProgramaVisita entity, int offset) {
        entity.setIdregistroclientelog(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdoficial(cursor.getLong(offset + 1));
        entity.setFechainicio(cursor.getString(offset + 2));
        entity.setObservacion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIdcliente(cursor.getLong(offset + 4));
        entity.setIdtipoclientelog(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setIdventacab(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setFechaproximollamado(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIdproducto(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ProgramaVisita entity, long rowId) {
        entity.setIdregistroclientelog(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(ProgramaVisita entity) {
        if(entity != null) {
            return entity.getIdregistroclientelog();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
