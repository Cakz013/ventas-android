package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PEDIDOS_FRECUENTES.
*/
public class PedidosFrecuentesDao extends AbstractDao<PedidosFrecuentes, Void> {

    public static final String TABLENAME = "PEDIDOS_FRECUENTES";

    /**
     * Properties of entity PedidosFrecuentes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Referencia = new Property(0, String.class, "referencia", false, "REFERENCIA");
        public final static Property Cantidad = new Property(1, Long.class, "cantidad", false, "CANTIDAD");
    }


    public PedidosFrecuentesDao(DaoConfig config) {
        super(config);
    }
    
    public PedidosFrecuentesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PEDIDOS_FRECUENTES' (" + //
                "'REFERENCIA' TEXT," + // 0: referencia
                "'CANTIDAD' INTEGER);"); // 1: cantidad
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PEDIDOS_FRECUENTES'";
        db.execSQL(sql);
    }


    @Override
    protected void bindValues(SQLiteStatement stmt, PedidosFrecuentes entity) {
        stmt.clearBindings();
 
        String referencia = entity.getReferencia();
        if (referencia != null) {
            stmt.bindString(1, referencia);
        }
 
        Long cantidad = entity.getCantidad();
        if (cantidad != null) {
            stmt.bindLong(2, cantidad);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public PedidosFrecuentes readEntity(Cursor cursor, int offset) {
        PedidosFrecuentes entity = new PedidosFrecuentes( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // referencia
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1) // cantidad
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PedidosFrecuentes entity, int offset) {
        entity.setReferencia(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCantidad(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(PedidosFrecuentes entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(PedidosFrecuentes entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
