package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.FormaPago;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORMA_PAGO".
*/
public class FormaPagoDao extends AbstractDao<FormaPago, Long> {

    public static final String TABLENAME = "FORMA_PAGO";

    /**
     * Properties of entity FormaPago.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idformapago = new Property(0, Long.class, "idformapago", true, "IDFORMAPAGO");
        public final static Property Descripcion = new Property(1, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Tipo = new Property(2, String.class, "tipo", false, "TIPO");
        public final static Property Estado = new Property(3, Boolean.class, "estado", false, "ESTADO");
    };


    public FormaPagoDao(DaoConfig config) {
        super(config);
    }

    public FormaPagoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FORMA_PAGO' (" + //
                "'IDFORMAPAGO' INTEGER PRIMARY KEY ," + // 0: idformapago
                "'DESCRIPCION' TEXT NOT NULL ," + // 1: descripcion
                "'TIPO' TEXT NOT NULL ," + // 2: tipo
                "'ESTADO' INTEGER);"); // 3: estado
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FORMA_PAGO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, FormaPago entity) {
        stmt.clearBindings();

        Long idformapago = entity.getIdformapago();
        if (idformapago != null) {
            stmt.bindLong(1, idformapago);
        }
        stmt.bindString(2, entity.getDescripcion());
        stmt.bindString(3, entity.getTipo());

        Boolean estado = entity.getEstado();
        if (estado != null) {
            stmt.bindLong(4, estado ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public FormaPago readEntity(Cursor cursor, int offset) {
        FormaPago entity = new FormaPago( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idformapago
                cursor.getString(offset + 1), // descripcion
                cursor.getString(offset + 2), // tipo
                cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // estado
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, FormaPago entity, int offset) {
        entity.setIdformapago(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDescripcion(cursor.getString(offset + 1));
        entity.setTipo(cursor.getString(offset + 2));
        entity.setEstado(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(FormaPago entity, long rowId) {
        entity.setIdformapago(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(FormaPago entity) {
        if(entity != null) {
            return entity.getIdformapago();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
