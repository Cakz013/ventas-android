package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.ColeccionProducto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLECCION_PRODUCTO".
*/
public class ColeccionProductoDao extends AbstractDao<ColeccionProducto, Long> {

    public static final String TABLENAME = "COLECCION_PRODUCTO";

    /**
     * Properties of entity ColeccionProducto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idcoleccionproducto = new Property(0, Long.class, "idcoleccionproducto", true, "IDCOLECCIONPRODUCTO");
        public final static Property Idcoleccion = new Property(1, long.class, "idcoleccion", false, "IDCOLECCION");
        public final static Property Idproducto = new Property(2, long.class, "idproducto", false, "IDPRODUCTO");
        public final static Property Descripcion = new Property(3, String.class, "descripcion", false, "DESCRIPCION");
    };


    public ColeccionProductoDao(DaoConfig config) {
        super(config);
    }

    public ColeccionProductoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COLECCION_PRODUCTO' (" + //
                "'IDCOLECCIONPRODUCTO' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idcoleccionproducto
                "'IDCOLECCION' INTEGER NOT NULL ," + // 1: idcoleccion
                "'IDPRODUCTO' INTEGER NOT NULL ," + // 2: idproducto
                "'DESCRIPCION' TEXT NOT NULL );"); // 3: descripcion
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COLECCION_PRODUCTO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ColeccionProducto entity) {
        stmt.clearBindings();

        Long idcoleccionproducto = entity.getIdcoleccionproducto();
        if (idcoleccionproducto != null) {
            stmt.bindLong(1, idcoleccionproducto);
        }
        stmt.bindLong(2, entity.getIdcoleccion());
        stmt.bindLong(3, entity.getIdproducto());
        stmt.bindString(4, entity.getDescripcion());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public ColeccionProducto readEntity(Cursor cursor, int offset) {
        ColeccionProducto entity = new ColeccionProducto( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idcoleccionproducto
                cursor.getLong(offset + 1), // idcoleccion
                cursor.getLong(offset + 2), // idproducto
                cursor.getString(offset + 3) // descripcion
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ColeccionProducto entity, int offset) {
        entity.setIdcoleccionproducto(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdcoleccion(cursor.getLong(offset + 1));
        entity.setIdproducto(cursor.getLong(offset + 2));
        entity.setDescripcion(cursor.getString(offset + 3));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ColeccionProducto entity, long rowId) {
        entity.setIdcoleccionproducto(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(ColeccionProducto entity) {
        if(entity != null) {
            return entity.getIdcoleccionproducto();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
