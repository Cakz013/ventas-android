package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.ColeccionEmbarque;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLECCION_EMBARQUE".
*/
public class ColeccionEmbarqueDao extends AbstractDao<ColeccionEmbarque, Long> {

    public static final String TABLENAME = "COLECCION_EMBARQUE";

    /**
     * Properties of entity ColeccionEmbarque.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idcoleccionembarque = new Property(0, Long.class, "idcoleccionembarque", true, "IDCOLECCIONEMBARQUE");
        public final static Property Idcoleccion = new Property(1, long.class, "idcoleccion", false, "IDCOLECCION");
        public final static Property Idproducto = new Property(2, long.class, "idproducto", false, "IDPRODUCTO");
        public final static Property Idsubproducto = new Property(3, long.class, "idsubproducto", false, "IDSUBPRODUCTO");
        public final static Property Estado = new Property(4, Boolean.class, "estado", false, "ESTADO");
        public final static Property Fechainicio = new Property(5, java.util.Date.class, "fechainicio", false, "FECHAINICIO");
        public final static Property Fechafin = new Property(6, java.util.Date.class, "fechafin", false, "FECHAFIN");
        public final static Property Promesaentrega = new Property(7, String.class, "promesaentrega", false, "PROMESAENTREGA");
        public final static Property Quincenaentreganro = new Property(8, long.class, "quincenaentreganro", false, "QUINCENAENTREGANRO");
        public final static Property Mesentreganro = new Property(9, long.class, "mesentreganro", false, "MESENTREGANRO");
        public final static Property Anhoentrega = new Property(10, long.class, "anhoentrega", false, "ANHOENTREGA");
    };


    public ColeccionEmbarqueDao(DaoConfig config) {
        super(config);
    }

    public ColeccionEmbarqueDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COLECCION_EMBARQUE' (" + //
                "'IDCOLECCIONEMBARQUE' INTEGER PRIMARY KEY ," + // 0: idcoleccionembarque
                "'IDCOLECCION' INTEGER NOT NULL ," + // 1: idcoleccion
                "'IDPRODUCTO' INTEGER NOT NULL ," + // 2: idproducto
                "'IDSUBPRODUCTO' INTEGER NOT NULL ," + // 3: idsubproducto
                "'ESTADO' INTEGER," + // 4: estado
                "'FECHAINICIO' INTEGER NOT NULL ," + // 5: fechainicio
                "'FECHAFIN' INTEGER NOT NULL ," + // 6: fechafin
                "'PROMESAENTREGA' TEXT," + // 7: promesaentrega
                "'QUINCENAENTREGANRO' INTEGER NOT NULL ," + // 8: quincenaentreganro
                "'MESENTREGANRO' INTEGER NOT NULL ," + // 9: mesentreganro
                "'ANHOENTREGA' INTEGER NOT NULL );"); // 10: anhoentrega
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COLECCION_EMBARQUE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ColeccionEmbarque entity) {
        stmt.clearBindings();

        Long idcoleccionembarque = entity.getIdcoleccionembarque();
        if (idcoleccionembarque != null) {
            stmt.bindLong(1, idcoleccionembarque);
        }
        stmt.bindLong(2, entity.getIdcoleccion());
        stmt.bindLong(3, entity.getIdproducto());
        stmt.bindLong(4, entity.getIdsubproducto());

        Boolean estado = entity.getEstado();
        if (estado != null) {
            stmt.bindLong(5, estado ? 1l: 0l);
        }
        stmt.bindLong(6, entity.getFechainicio().getTime());
        stmt.bindLong(7, entity.getFechafin().getTime());

        String promesaentrega = entity.getPromesaentrega();
        if (promesaentrega != null) {
            stmt.bindString(8, promesaentrega);
        }
        stmt.bindLong(9, entity.getQuincenaentreganro());
        stmt.bindLong(10, entity.getMesentreganro());
        stmt.bindLong(11, entity.getAnhoentrega());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public ColeccionEmbarque readEntity(Cursor cursor, int offset) {
        ColeccionEmbarque entity = new ColeccionEmbarque( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idcoleccionembarque
                cursor.getLong(offset + 1), // idcoleccion
                cursor.getLong(offset + 2), // idproducto
                cursor.getLong(offset + 3), // idsubproducto
                cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0, // estado
                new java.util.Date(cursor.getLong(offset + 5)), // fechainicio
                new java.util.Date(cursor.getLong(offset + 6)), // fechafin
                cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // promesaentrega
                cursor.getLong(offset + 8), // quincenaentreganro
                cursor.getLong(offset + 9), // mesentreganro
                cursor.getLong(offset + 10) // anhoentrega
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ColeccionEmbarque entity, int offset) {
        entity.setIdcoleccionembarque(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdcoleccion(cursor.getLong(offset + 1));
        entity.setIdproducto(cursor.getLong(offset + 2));
        entity.setIdsubproducto(cursor.getLong(offset + 3));
        entity.setEstado(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
        entity.setFechainicio(new java.util.Date(cursor.getLong(offset + 5)));
        entity.setFechafin(new java.util.Date(cursor.getLong(offset + 6)));
        entity.setPromesaentrega(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setQuincenaentreganro(cursor.getLong(offset + 8));
        entity.setMesentreganro(cursor.getLong(offset + 9));
        entity.setAnhoentrega(cursor.getLong(offset + 10));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ColeccionEmbarque entity, long rowId) {
        entity.setIdcoleccionembarque(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(ColeccionEmbarque entity) {
        if(entity != null) {
            return entity.getIdcoleccionembarque();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
