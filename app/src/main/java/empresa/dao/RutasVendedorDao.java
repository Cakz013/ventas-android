package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import empresa.dao.DaoSession;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RUTAS_VENDEDOR.
*/
public class RutasVendedorDao extends AbstractDao<RutasVendedor, Long> {

    public static final String TABLENAME = "RUTAS_VENDEDOR";

    /**
     * Properties of entity RutasVendedor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Idruta = new Property(0, Long.class, "idruta", true, "IDRUTA");
        public final static Property Idcliente = new Property(1, Long.class, "idcliente", false, "IDCLIENTE");
        public final static Property Idoficial = new Property(2, Long.class, "idoficial", false, "IDOFICIAL");
        public final static Property Fecha = new Property(3, String.class, "fecha", false, "FECHA");
        public final static Property Hora = new Property(4, String.class, "hora", false, "HORA");
        public final static Property Latitud = new Property(5, String.class, "latitud", false, "LATITUD");
        public final static Property Longitud = new Property(6, String.class, "longitud", false, "LONGITUD");
        public final static Property Idtiporecorrido = new Property(7, Long.class, "idtiporecorrido", false, "IDTIPORECORRIDO");
    };


    public RutasVendedorDao(DaoConfig config) {
        super(config);
    }
    
    public RutasVendedorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RUTAS_VENDEDOR' (" + //
                "'IDRUTA' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idruta
                "'IDCLIENTE' INTEGER," + // 1: idcliente
                "'IDOFICIAL' TEXT," + // 2: idoficial
                "'FECHA' TEXT NOT NULL ," + // 3: fecha
                "'HORA' TEXT NOT NULL ," + // 4: hora
                "'LATITUD' TEXT," + // 5: latitud
                "'LONGITUD' TEXT," + // 6: longitud
                "'IDTIPORECORRIDO' TEXT);"); // 7: idtiporecorrido
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RUTAS_VENDEDOR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RutasVendedor entity) {
        stmt.clearBindings();
 
        Long idruta = entity.getIdruta();
        if (idruta != null) {
            stmt.bindLong(1, idruta);
        }
 
        Long idcliente = entity.getIdcliente();
        if (idcliente != null) {
            stmt.bindLong(2, idcliente);
        }

        Long idoficial = entity.getIdoficial();
        if (idoficial != null) {
            stmt.bindLong(3, idoficial);
        }
        stmt.bindString(4, entity.getFecha());
        stmt.bindString(5, entity.getHora());
 
        String latitud = entity.getLatitud();
        if (latitud != null) {
            stmt.bindString(6, latitud);
        }
 
        String longitud = entity.getLongitud();
        if (longitud != null) {
            stmt.bindString(7, longitud);
        }

        Long idtiporecorrido = entity.getIdtiporecorrido();
        if (idtiporecorrido != null) {
            stmt.bindLong(8, idtiporecorrido);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RutasVendedor readEntity(Cursor cursor, int offset) {
        RutasVendedor entity = new RutasVendedor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idruta
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // idcliente
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // idoficial
            cursor.getString(offset + 3), // fecha
            cursor.getString(offset + 4), // hora
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // latitud
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // longitud
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // idtiporecorrido
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RutasVendedor entity, int offset) {
        entity.setIdruta(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdcliente(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIdoficial(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setFecha(cursor.getString(offset + 3));
        entity.setHora(cursor.getString(offset + 4));
        entity.setLatitud(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLongitud(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIdtiporecorrido(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RutasVendedor entity, long rowId) {
        entity.setIdruta(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RutasVendedor entity) {
        if(entity != null) {
            return entity.getIdruta();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
