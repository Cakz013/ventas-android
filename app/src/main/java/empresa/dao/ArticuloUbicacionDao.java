package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.ArticuloUbicacion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ARTICULO_UBICACION".
*/
public class ArticuloUbicacionDao extends AbstractDao<ArticuloUbicacion, Long> {

    public static final String TABLENAME = "ARTICULO_UBICACION";

    /**
     * Properties of entity ArticuloUbicacion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idarticulosucursalubicacion = new Property(0, Long.class, "idarticulosucursalubicacion", true, "IDARTICULOSUCURSALUBICACION");
        public final static Property Idarticulo = new Property(1, Long.class, "idarticulo", false, "IDARTICULO");
        public final static Property Codsucursal = new Property(2, Long.class, "codsucursal", false, "CODSUCURSAL");
        public final static Property Iddeposito = new Property(3, Long.class, "iddeposito", false, "IDDEPOSITO");
        public final static Property Idestanteria = new Property(4, Long.class, "idestanteria", false, "IDESTANTERIA");
        public final static Property Idrack = new Property(5, Long.class, "idrack", false, "IDRACK");
        public final static Property Idbandeja = new Property(6, Long.class, "idbandeja", false, "IDBANDEJA");
        public final static Property Cantidad = new Property(7, Long.class, "cantidad", false, "CANTIDAD");
        public final static Property Cantidadvirtual = new Property(8, Long.class, "cantidadvirtual", false, "CANTIDADVIRTUAL");
        public final static Property Idbox = new Property(9, Long.class, "idbox", false, "IDBOX");
        public final static Property Idproducto = new Property(10, Long.class, "idproducto", false, "IDPRODUCTO");
        public final static Property Idcoleccion = new Property(11, Long.class, "idcoleccion", false, "IDCOLECCION");
        public final static Property Codgrade = new Property(12, Long.class, "codgrade", false, "CODGRADE");
    };


    public ArticuloUbicacionDao(DaoConfig config) {
        super(config);
    }

    public ArticuloUbicacionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ARTICULO_UBICACION' (" + //
                "'IDARTICULOSUCURSALUBICACION' INTEGER PRIMARY KEY ," + // 0: idarticulosucursalubicacion
                "'IDARTICULO' INTEGER," + // 1: idarticulo
                "'CODSUCURSAL' INTEGER," + // 2: codsucursal
                "'IDDEPOSITO' INTEGER," + // 3: iddeposito
                "'IDESTANTERIA' INTEGER," + // 4: idestanteria
                "'IDRACK' INTEGER," + // 5: idrack
                "'IDBANDEJA' INTEGER," + // 6: idbandeja
                "'CANTIDAD' INTEGER," + // 7: cantidad
                "'CANTIDADVIRTUAL' INTEGER," + // 8: cantidadvirtual
                "'IDBOX' INTEGER," + // 9: idbox
                "'IDPRODUCTO' INTEGER," + // 10: idproducto
                "'IDCOLECCION' INTEGER," + // 11: idcoleccion
                "'CODGRADE' INTEGER);"); // 12: codgrade
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ARTICULO_UBICACION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ArticuloUbicacion entity) {
        stmt.clearBindings();

        Long idarticulosucursalubicacion = entity.getIdarticulosucursalubicacion();
        if (idarticulosucursalubicacion != null) {
            stmt.bindLong(1, idarticulosucursalubicacion);
        }

        Long idarticulo = entity.getIdarticulo();
        if (idarticulo != null) {
            stmt.bindLong(2, idarticulo);
        }

        Long codsucursal = entity.getCodsucursal();
        if (codsucursal != null) {
            stmt.bindLong(3, codsucursal);
        }

        Long iddeposito = entity.getIddeposito();
        if (iddeposito != null) {
            stmt.bindLong(4, iddeposito);
        }

        Long idestanteria = entity.getIdestanteria();
        if (idestanteria != null) {
            stmt.bindLong(5, idestanteria);
        }

        Long idrack = entity.getIdrack();
        if (idrack != null) {
            stmt.bindLong(6, idrack);
        }

        Long idbandeja = entity.getIdbandeja();
        if (idbandeja != null) {
            stmt.bindLong(7, idbandeja);
        }

        Long cantidad = entity.getCantidad();
        if (cantidad != null) {
            stmt.bindLong(8, cantidad);
        }

        Long cantidadvirtual = entity.getCantidadvirtual();
        if (cantidadvirtual != null) {
            stmt.bindLong(9, cantidadvirtual);
        }

        Long idbox = entity.getIdbox();
        if (idbox != null) {
            stmt.bindLong(10, idbox);
        }

        Long idproducto = entity.getIdproducto();
        if (idproducto != null) {
            stmt.bindLong(11, idproducto);
        }

        Long idcoleccion = entity.getIdcoleccion();
        if (idcoleccion != null) {
            stmt.bindLong(12, idcoleccion);
        }

        Long codgrade = entity.getCodgrade();
        if (codgrade != null) {
            stmt.bindLong(13, codgrade);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public ArticuloUbicacion readEntity(Cursor cursor, int offset) {
        ArticuloUbicacion entity = new ArticuloUbicacion( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idarticulosucursalubicacion
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // idarticulo
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // codsucursal
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // iddeposito
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // idestanteria
                cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // idrack
                cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // idbandeja
                cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // cantidad
                cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // cantidadvirtual
                cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // idbox
                cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // idproducto
                cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // idcoleccion
                cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12) // codgrade
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ArticuloUbicacion entity, int offset) {
        entity.setIdarticulosucursalubicacion(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdarticulo(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCodsucursal(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setIddeposito(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setIdestanteria(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setIdrack(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setIdbandeja(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setCantidad(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setCantidadvirtual(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setIdbox(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setIdproducto(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setIdcoleccion(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setCodgrade(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ArticuloUbicacion entity, long rowId) {
        entity.setIdarticulosucursalubicacion(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(ArticuloUbicacion entity) {
        if(entity != null) {
            return entity.getIdarticulosucursalubicacion();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
