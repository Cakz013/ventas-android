package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.ClienteLog;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLIENTE_LOG".
*/
public class ClienteLogDao extends AbstractDao<ClienteLog, Long> {

    public static final String TABLENAME = "CLIENTE_LOG";

    /**
     * Properties of entity ClienteLog.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idclientelog = new Property(0, Long.class, "idclientelog", true, "IDCLIENTELOG");
        public final static Property Idtipoclientelog = new Property(1, Long.class, "idtipoclientelog", false, "IDTIPOCLIENTELOG");
        public final static Property Fecha = new Property(2, java.util.Date.class, "fecha", false, "FECHA");
        public final static Property Observacion = new Property(3, String.class, "observacion", false, "OBSERVACION");
        public final static Property Idusuario = new Property(4, long.class, "idusuario", false, "IDUSUARIO");
        public final static Property Idcliente = new Property(5, long.class, "idcliente", false, "IDCLIENTE");
        public final static Property Usuario = new Property(6, String.class, "usuario", false, "USUARIO");
        public final static Property Responsable = new Property(7, String.class, "responsable", false, "RESPONSABLE");
    };


    public ClienteLogDao(DaoConfig config) {
        super(config);
    }

    public ClienteLogDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CLIENTE_LOG' (" + //
                "'IDCLIENTELOG' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idclientelog
                "'IDTIPOCLIENTELOG' INTEGER," + // 1: idtipoclientelog
                "'FECHA' INTEGER NOT NULL ," + // 2: fecha
                "'OBSERVACION' TEXT NOT NULL ," + // 3: observacion
                "'IDUSUARIO' INTEGER NOT NULL ," + // 4: idusuario
                "'IDCLIENTE' INTEGER NOT NULL ," + // 5: idcliente
                "'USUARIO' TEXT NOT NULL ," + // 6: usuario
                "'RESPONSABLE' TEXT NOT NULL );"); // 7: responsable
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CLIENTE_LOG'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ClienteLog entity) {
        stmt.clearBindings();

        Long idclientelog = entity.getIdclientelog();
        if (idclientelog != null) {
            stmt.bindLong(1, idclientelog);
        }

        Long idtipoclientelog = entity.getIdtipoclientelog();
        if (idtipoclientelog != null) {
            stmt.bindLong(2, idtipoclientelog);
        }
        stmt.bindLong(3, entity.getFecha().getTime());
        stmt.bindString(4, entity.getObservacion());
        stmt.bindLong(5, entity.getIdusuario());
        stmt.bindLong(6, entity.getIdcliente());
        stmt.bindString(7, entity.getUsuario());
        stmt.bindString(8, entity.getResponsable());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public ClienteLog readEntity(Cursor cursor, int offset) {
        ClienteLog entity = new ClienteLog( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idclientelog
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // idtipoclientelog
                new java.util.Date(cursor.getLong(offset + 2)), // fecha
                cursor.getString(offset + 3), // observacion
                cursor.getLong(offset + 4), // idusuario
                cursor.getLong(offset + 5), // idcliente
                cursor.getString(offset + 6), // usuario
                cursor.getString(offset + 7) // responsable
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ClienteLog entity, int offset) {
        entity.setIdclientelog(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdtipoclientelog(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setFecha(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setObservacion(cursor.getString(offset + 3));
        entity.setIdusuario(cursor.getLong(offset + 4));
        entity.setIdcliente(cursor.getLong(offset + 5));
        entity.setUsuario(cursor.getString(offset + 6));
        entity.setResponsable(cursor.getString(offset + 7));
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ClienteLog entity, long rowId) {
        entity.setIdclientelog(rowId);
        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(ClienteLog entity) {
        if(entity != null) {
            return entity.getIdclientelog();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
