package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.ClienteProducto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLIENTE_PRODUCTO".
*/
public class ClienteProductoDao extends AbstractDao<ClienteProducto, Void> {

    public static final String TABLENAME = "CLIENTE_PRODUCTO";

    /**
     * Properties of entity ClienteProducto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Idcliente = new Property(0, Long.class, "idcliente", false, "IDCLIENTE");
        public final static Property Idproducto = new Property(1, Long.class, "idproducto", false, "IDPRODUCTO");
        public final static Property Idempresa = new Property(2, Long.class, "idempresa", false, "IDEMPRESA");
        public final static Property Estado = new Property(3, Boolean.class, "estado", false, "ESTADO");
    };


    public ClienteProductoDao(DaoConfig config) {
        super(config);
    }

    public ClienteProductoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CLIENTE_PRODUCTO' (" + //
                "'IDCLIENTE' INTEGER," + // 0: idcliente
                "'IDPRODUCTO' INTEGER," + // 1: idproducto
                "'IDEMPRESA' INTEGER," + // 2: idempresa
                "'ESTADO' INTEGER);"); // 3: estado
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CLIENTE_PRODUCTO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ClienteProducto entity) {
        stmt.clearBindings();

        Long idcliente = entity.getIdcliente();
        if (idcliente != null) {
            stmt.bindLong(1, idcliente);
        }

        Long idproducto = entity.getIdproducto();
        if (idproducto != null) {
            stmt.bindLong(2, idproducto);
        }

        Long idempresa = entity.getIdempresa();
        if (idempresa != null) {
            stmt.bindLong(3, idempresa);
        }

        Boolean estado = entity.getEstado();
        if (estado != null) {
            stmt.bindLong(4, estado ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    /** @inheritdoc */
    @Override
    public ClienteProducto readEntity(Cursor cursor, int offset) {
        ClienteProducto entity = new ClienteProducto( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idcliente
                cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // idproducto
                cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // idempresa
                cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0 // estado
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ClienteProducto entity, int offset) {
        entity.setIdcliente(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdproducto(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setIdempresa(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setEstado(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
    }

    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(ClienteProducto entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    /** @inheritdoc */
    @Override
    public Void getKey(ClienteProducto entity) {
        return null;
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
