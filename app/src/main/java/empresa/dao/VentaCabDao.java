package empresa.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import empresa.dao.VentaCab;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VENTA_CAB".
*/
public class VentaCabDao extends AbstractDao<VentaCab, Long> {

    public static final String TABLENAME = "VENTA_CAB";

    /**
     * Properties of entity VentaCab.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Fechaoperacion = new Property(1, java.util.Date.class, "fechaoperacion", false, "FECHAOPERACION");
        public final static Property Fecha = new Property(2, java.util.Date.class, "fecha", false, "FECHA");
        public final static Property Idusuario = new Property(3, Long.class, "idusuario", false, "IDUSUARIO");
        public final static Property Idoficial = new Property(4, Long.class, "idoficial", false, "IDOFICIAL");
        public final static Property Idcliente = new Property(5, Long.class, "idcliente", false, "IDCLIENTE");
        public final static Property Codmoneda = new Property(6, String.class, "codmoneda", false, "CODMONEDA");
        public final static Property Idformapago = new Property(7, long.class, "idformapago", false, "IDFORMAPAGO");
        public final static Property Importe = new Property(8, double.class, "importe", false, "IMPORTE");
        public final static Property Importeequivalente = new Property(9, Double.class, "importeequivalente", false, "IMPORTEEQUIVALENTE");
        public final static Property Codsucursal = new Property(10, Long.class, "codsucursal", false, "CODSUCURSAL");
        public final static Property Fechapactoentrega = new Property(11, java.util.Date.class, "fechapactoentrega", false, "FECHAPACTOENTREGA");
        public final static Property Cantidadtotal = new Property(12, long.class, "cantidadtotal", false, "CANTIDADTOTAL");
        public final static Property Idproducto = new Property(13, long.class, "idproducto", false, "IDPRODUCTO");
        public final static Property Promediodescuento = new Property(14, Long.class, "promediodescuento", false, "PROMEDIODESCUENTO");
        public final static Property Idcoleccion = new Property(15, long.class, "idcoleccion", false, "IDCOLECCION");
        public final static Property Tipo = new Property(16, String.class, "tipo", false, "TIPO");
        public final static Property Observacion = new Property(17, String.class, "observacion", false, "OBSERVACION");
        public final static Property Condicion = new Property(18, String.class, "condicion", false, "CONDICION");
        public final static Property Tasapromocion = new Property(19, Double.class, "tasapromocion", false, "TASAPROMOCION");
        public final static Property Quincenaentrega = new Property(20, Long.class, "quincenaentrega", false, "QUINCENAENTREGA");
        public final static Property Quincenaentregames = new Property(21, Long.class, "quincenaentregames", false, "QUINCENAENTREGAMES");
        public final static Property Enviado = new Property(22, boolean.class, "enviado", false, "ENVIADO");
        public final static Property Idventacab = new Property(23, Long.class, "getIdventacab", false, "IDVENTACABALIANZA");
        public final static Property Datosproduccionstring = new Property(24, String.class, "datosproduccionstring", false, "DATOSPRODUCCIONSTRING");
        public final static Property Entregainmediata = new Property(25, Boolean.class, "entregainmediata", false, "ENTREGAINMEDIATA");
        public final static Property Idpromocion = new Property(26, Long.class, "idpromocion", false, "IDPROMOCION");
        public final static Property Idescala = new Property(27, Long.class, "idescala", false, "IDESCALA");
        public final static Property Comision = new Property(28, Double.class, "comision", false, "COMISION");
        public final static Property Idempresa = new Property(29, long.class, "idempresa", false, "IDEMPRESA");
        public final static Property EsTipoCalzado = new Property(30, boolean.class, "esTipoCalzado", false, "ES_TIPO_CALZADO");
        public final static Property EsFlete = new Property(31, boolean.class, "esFlete", false, "ES_FLETE");
    };


    public VentaCabDao(DaoConfig config) {
        super(config);
    }

    public VentaCabDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'VENTA_CAB' (" + //
                "'IDVENTACAB' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: idventacab
                "'FECHAOPERACION' INTEGER NOT NULL ," + // 1: fechaoperacion
                "'FECHA' INTEGER NOT NULL ," + // 2: fecha
                "'IDUSUARIO' INTEGER," + // 3: idusuario
                "'IDOFICIAL' INTEGER," + // 4: idoficial
                "'IDCLIENTE' INTEGER," + // 5: idcliente
                "'CODMONEDA' TEXT," + // 6: codmoneda
                "'IDFORMAPAGO' INTEGER NOT NULL ," + // 7: idformapago
                "'IMPORTE' REAL NOT NULL ," + // 8: importe
                "'IMPORTEEQUIVALENTE' REAL," + // 9: importeequivalente
                "'CODSUCURSAL' INTEGER," + // 10: codsucursal
                "'FECHAPACTOENTREGA' INTEGER NOT NULL ," + // 11: fechapactoentrega
                "'CANTIDADTOTAL' INTEGER NOT NULL ," + // 12: cantidadtotal
                "'IDPRODUCTO' INTEGER NOT NULL ," + // 13: idproducto
                "'PROMEDIODESCUENTO' INTEGER," + // 14: promediodescuento
                "'IDCOLECCION' INTEGER NOT NULL ," + // 15: idcoleccion
                "'TIPO' TEXT NOT NULL ," + // 16: tipo
                "'OBSERVACION' TEXT," + // 17: observacion
                "'CONDICION' TEXT," + // 18: condicion
                "'TASAPROMOCION' REAL," + // 19: tasapromocion
                "'QUINCENAENTREGA' INTEGER," + // 20: quincenaentrega
                "'QUINCENAENTREGAMES' INTEGER," + // 21: quincenaentregames
                "'ENVIADO' INTEGER NOT NULL ," + // 22: enviado
                "'IDVENTACABALIANZA' INTEGER," + // 23: getIdventacab
                "'DATOSPRODUCCIONSTRING' TEXT," + // 24: datosproduccionstring
                "'ENTREGAINMEDIATA' INTEGER," + // 25: entregainmediata
                "'IDPROMOCION' INTEGER," + // 26: idpromocion
                "'IDESCALA' INTEGER," + // 27: idescala
                "'COMISION' REAL," + // 28: comision
                "'IDEMPRESA' INTEGER NOT NULL ," + // 29: idempresa
                "'ES_TIPO_CALZADO' INTEGER NOT NULL ," + // 30: esTipoCalzado
                "'ES_FLETE' INTEGER NOT NULL );"); // 31: esFlete
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'VENTA_CAB'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, VentaCab entity) {
        stmt.clearBindings();

        Long idventacab = entity.getIdventacab();
        if (idventacab != null) {
            stmt.bindLong(1, idventacab);
        }
        stmt.bindLong(2, entity.getFechaoperacion().getTime());
        stmt.bindLong(3, entity.getFecha().getTime());

        Long idusuario = entity.getIdusuario();
        if (idusuario != null) {
            stmt.bindLong(4, idusuario);
        }

        Long idoficial = entity.getIdoficial();
        if (idoficial != null) {
            stmt.bindLong(5, idoficial);
        }

        Long idcliente = entity.getIdcliente();
        if (idcliente != null) {
            stmt.bindLong(6, idcliente);
        }

        String codmoneda = entity.getCodmoneda();
        if (codmoneda != null) {
            stmt.bindString(7, codmoneda);
        }
        stmt.bindLong(8, entity.getIdformapago());
        stmt.bindDouble(9, entity.getImporte());

        Double importeequivalente = entity.getImporteequivalente();
        if (importeequivalente != null) {
            stmt.bindDouble(10, importeequivalente);
        }

        Long codsucursal = entity.getCodsucursal();
        if (codsucursal != null) {
            stmt.bindLong(11, codsucursal);
        }
        stmt.bindLong(12, entity.getFechapactoentrega().getTime());
        stmt.bindLong(13, entity.getCantidadtotal());
        stmt.bindLong(14, entity.getIdproducto());

        Long promediodescuento = entity.getPromediodescuento();
        if (promediodescuento != null) {
            stmt.bindLong(15, promediodescuento);
        }
        stmt.bindLong(16, entity.getIdcoleccion());
        stmt.bindString(17, entity.getTipo());

        String observacion = entity.getObservacion();
        if (observacion != null) {
            stmt.bindString(18, observacion);
        }

        String condicion = entity.getCondicion();
        if (condicion != null) {
            stmt.bindString(19, condicion);
        }

        Double tasapromocion = entity.getTasapromocion();
        if (tasapromocion != null) {
            stmt.bindDouble(20, tasapromocion);
        }

        Long quincenaentrega = entity.getQuincenaentrega();
        if (quincenaentrega != null) {
            stmt.bindLong(21, quincenaentrega);
        }

        Long quincenaentregames = entity.getQuincenaentregames();
        if (quincenaentregames != null) {
            stmt.bindLong(22, quincenaentregames);
        }
        stmt.bindLong(23, entity.getEnviado() ? 1l: 0l);

        String datosproduccionstring = entity.getDatosproduccionstring();
        if (datosproduccionstring != null) {
            stmt.bindString(25, datosproduccionstring);
        }

        Boolean entregainmediata = entity.getEntregainmediata();
        if (entregainmediata != null) {
            stmt.bindLong(26, entregainmediata ? 1l: 0l);
        }

        Long idpromocion = entity.getIdpromocion();
        if (idpromocion != null) {
            stmt.bindLong(27, idpromocion);
        }

        Long idescala = entity.getIdescala();
        if (idescala != null) {
            stmt.bindLong(28, idescala);
        }

        Double comision = entity.getComision();
        if (comision != null) {
            stmt.bindDouble(29, comision);
        }
        stmt.bindLong(30, entity.getIdempresa());
        stmt.bindLong(31, entity.getEsTipoCalzado() ? 1l: 0l);
        stmt.bindLong(32, entity.getEsFlete() ? 1l: 0l);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public VentaCab readEntity(Cursor cursor, int offset) {
        VentaCab entity = new VentaCab( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idventacab
                new java.util.Date(cursor.getLong(offset + 1)), // fechaoperacion
                new java.util.Date(cursor.getLong(offset + 2)), // fecha
                cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // idusuario
                cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // idoficial
                cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // idcliente
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // codmoneda
                cursor.getLong(offset + 7), // idformapago
                cursor.getDouble(offset + 8), // importe
                cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // importeequivalente
                cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10), // codsucursal
                new java.util.Date(cursor.getLong(offset + 11)), // fechapactoentrega
                cursor.getLong(offset + 12), // cantidadtotal
                cursor.getLong(offset + 13), // idproducto
                cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // promediodescuento
                cursor.getLong(offset + 15), // idcoleccion
                cursor.getString(offset + 16), // tipo
                cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // observacion
                cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // condicion
                cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19), // tasapromocion
                cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20), // quincenaentrega
                cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21), // quincenaentregames
                cursor.getShort(offset + 22) != 0, // enviado
                cursor.isNull(offset + 23) ? null : cursor.getLong(offset + 23), // getIdventacab
                cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // datosproduccionstring
                cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0, // entregainmediata
                cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26), // idpromocion
                cursor.isNull(offset + 27) ? null : cursor.getLong(offset + 27), // idescala
                cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28), // comision
                cursor.getLong(offset + 29), // idempresa
                cursor.getShort(offset + 30) != 0, // esTipoCalzado
                cursor.getShort(offset + 31) != 0 // esFlete
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, VentaCab entity, int offset) {

        entity.setFechaoperacion(new java.util.Date(cursor.getLong(offset + 1)));
        entity.setFecha(new java.util.Date(cursor.getLong(offset + 2)));
        entity.setIdusuario(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setIdoficial(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setIdcliente(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setCodmoneda(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIdformapago(cursor.getLong(offset + 7));
        entity.setImporte(cursor.getDouble(offset + 8));
        entity.setImporteequivalente(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setCodsucursal(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
        entity.setFechapactoentrega(new java.util.Date(cursor.getLong(offset + 11)));
        entity.setCantidadtotal(cursor.getLong(offset + 12));
        entity.setIdproducto(cursor.getLong(offset + 13));
        entity.setPromediodescuento(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setIdcoleccion(cursor.getLong(offset + 15));
        entity.setTipo(cursor.getString(offset + 16));
        entity.setObservacion(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCondicion(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setTasapromocion(cursor.isNull(offset + 19) ? null : cursor.getDouble(offset + 19));
        entity.setQuincenaentrega(cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20));
        entity.setQuincenaentregames(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
        entity.setEnviado(cursor.getShort(offset + 22) != 0);

        entity.setDatosproduccionstring(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setEntregainmediata(cursor.isNull(offset + 25) ? null : cursor.getShort(offset + 25) != 0);
        entity.setIdpromocion(cursor.isNull(offset + 26) ? null : cursor.getLong(offset + 26));
        entity.setIdescala(cursor.isNull(offset + 27) ? null : cursor.getLong(offset + 27));
        entity.setComision(cursor.isNull(offset + 28) ? null : cursor.getDouble(offset + 28));
        entity.setIdempresa(cursor.getLong(offset + 29));
        entity.setEsTipoCalzado(cursor.getShort(offset + 30) != 0);
        entity.setEsFlete(cursor.getShort(offset + 31) != 0);
    }

    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(VentaCab entity, long rowId) {

        return rowId;
    }

    /** @inheritdoc */
    @Override
    public Long getKey(VentaCab entity) {
        if(entity != null) {
            return entity.getIdventacab();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}

